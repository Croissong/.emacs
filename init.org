* Initialize
** Coding Environment
[[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][@masteringemacs]]
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (prefer-coding-system 'utf-8-unix)
    (setq buffer-file-coding-system 'utf-8-unix
          default-file-name-coding-system 'utf-8-unix
          utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
          locale-coding-system 'utf-8-unix)
    (set-terminal-coding-system 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8-unix)
    (set-language-environment 'utf-8)
    (set-default-coding-systems 'utf-8-unix)
    (unless (eq system-type 'windows-nt)
      (set-selection-coding-system 'utf-8-unix)))
#+END_SRC
** Initialize package.el
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (require 'package)
    (package-initialize)
    (setq package-enable-at-startup nil
          package-archives
          '(("gnu" . "http://elpa.gnu.org/packages/")
            ("melpa" . "http://melpa.milkbox.net/packages/")
            ("elpy" . "https://jorgenschaefer.github.io/packages/")
            ("org" . "http://orgmode.org/elpa/"))
          load-prefer-newer t))
#+END_SRC
** Bootstrap req-package
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (unless (package-installed-p 'req-package)
      (package-refresh-contents)
      (package-install 'req-package))
    (require 'cl-lib)
    (require 'req-package)
    (require 'bind-key))
#+END_SRC
** Auto-Compile
[[https://github.com/tarsius/auto-compile][@github]]
#+BEGIN_SRC emacs-lisp :tangle no
 (req-package auto-compile
   :init (auto-compile-on-load-mode)
 )
#+END_SRC
** my/org-init
#+BEGIN_SRC emacs-lisp
(req-package org-init
  :load-path "els/org-init/")
#+END_SRC
** My/Utils
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (req-package
     my-util
     :force t
     :functions my-util-ensureEmacsDir my-util-cb? my-util-win? my-util-linux?
     :load-path "els/my-utils/"))
#+END_SRC
* Keybindings
** Keybindings
*** Moving
**** Between Windows
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-ö"  . windmove-left)
 ("C-#" . windmove-right)
 ("C-ü" . windmove-up)
 ("C-ä" . windmove-down)
 ("C-Ü" . clone-indirect-buffer))
#+END_SRC
*** delete other window
#+BEGIN_SRC emacs-lisp
(defun delete-other-window ()
  (interactive)
  (delete-window (other-window 1)))

(bind-key* "C-q" 'delete-other-window)
#+END_SRC
*** disable overwrite
#+BEGIN_SRC emacs-lisp
(define-key global-map [(insert)] nil)
#+END_SRC
*** search M-s
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("M-s r" . replace-string)
 ("M-s q" . query-replace))
#+END_SRC
*** revert buffer
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("M-r" . revert-buffer))
#+END_SRC
*** hm
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-M-k" . kill-this-buffer)
 ("C-l" . goto-line)
 ("M-_" . shell-command))
;;in global keymap because conflict with org-mode new heading
(bind-keys ("C-<return>" . new-line-below)
           ("M-<return>" . new-line-above))
#+END_SRC
* Generic
** My Values
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
(defvar gdrive-dir (concat default-directory "cloud/"))
(defvar meinAll-dir (concat gdrive-dir "dokumente/meinAll/"))
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(my-util-ensureEmacsDir "config/")
(my-util-ensureEmacsDir "save/autosave")
(my-util-ensureEmacsDir "save/backup")

;; TODO
(setq-default indent-tabs-mode nil
              tab-width 2
              indent-line-function 'insert-tab)
#+END_SRC
*** Backup
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions t
  kept-new-versions 6
  create-lockfiles nil
  kept-old-versions 2
  version-control t
  backup-directory-alist '((".*" . "~/.emacs.d/save/backup/")))
#+END_SRC
*** Autosave
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** Start-Up
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(add-hook 'emacs-startup-hook (lambda () (kill-buffer "*scratch*")))
#+END_SRC
** before-save
#+BEGIN_SRC emacs-lisp
(defun my/add-format-before-save(mode-hook)
  (add-hook mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'delete-trailing-whitespace nil 'local)
              (add-hook 'before-save-hook (lambda() (indent-region (point-min) (point-max) nil)) nil 'local))))
#+END_SRC
** littlest things
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
(setq backup-inhibited 1
      ring-bell-function 'ignore
      vc-follow-symlinks t)
;; http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3
#+END_SRC
*** Kill active process buffer no prompt
#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC
** async shell buffer
#+BEGIN_SRC emacs-lisp
(setq display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))
#+END_SRC
* Style
** Frame
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(defun my/style-frame()
  ;;(fringe-mode '(1 . 0))
  (set-face-attribute 'vertical-border nil :foreground "bisque4")
  (set-cursor-color "royal blue")
  (set-face-attribute 'show-paren-match nil :background nil)
  (split-window-horizontally)
  (split-window-vertically)
  (other-window -1)
  (split-window-vertically)
  (other-window 2)
  )
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (my/style-frame)
                ))
  (my/style-frame)
  )
#+END_SRC
** Mode-line
#+BEGIN_SRC emacs-lisp
;; (set-face-attribute 'mode-line nil :height 135 :foreground "#28a428" :background "#2a2a28")
;; (set-face-attribute 'mode-line-inactive nil :height 135 :foreground "#995400" :background "#2a2a28")
#+END_SRC
** Generic
Linewrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
(diminish 'visual-line-mode)
#+END_SRC
** Faces
*** What does it do [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
 '(magit-diff-use-overlays nil)
#+END_SRC
* Packages
** Style
*** Adaptive-Wrap
#+BEGIN_SRC emacs-lisp
(req-package adaptive-wrap
  :init
  (define-globalized-minor-mode adaptive-wrap-global-mode
  adaptive-wrap-prefix-mode
  adaptive-wrap-prefix-mode)

  :config
  (adaptive-wrap-global-mode)
  )
#+END_SRC
*** Window
**** Purpose-mode
[[https://github.com/bmag/emacs-purpose][@github]]
#+BEGIN_SRC emacs-lisp
(req-package window-purpose
    :config
  (add-to-list 'purpose-user-mode-purposes '(rust-mode . rust))
  (add-to-list 'purpose-user-mode-purposes '(cargo-process-mode . cargo-process))
  (purpose-compile-user-configuration)
  )
#+END_SRC
**** Winner-mode [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(winner-mode 1)
#+END_SRC
**** No Vertical Split [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
;; dont allow vertical split (windows top/bottom)
(setq split-height-threshold nil)
(setq split-width-threshold 80)
#+END_SRC
*** More
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** PackageManagement
*** Auto-update [disabled
[[https://github.com/rranelli/auto-package-update.el][@Github]]
#+BEGIN_SRC emacs-lisp :tangle no
 (req-package auto-package-update
   :init

   :config
   ;;(auto-package-update-now)
 )
#+END_SRC
** View large files
#+BEGIN_SRC emacs-lisp
(req-package vlf)
#+END_SRC
** Minor Modes
*** Drag-stuff
#+BEGIN_SRC emacs-lisp
(req-package drag-stuff
    :init
  :config
  (if (my-util-cb?)
      (bind-keys :map drag-stuff-mode-map
                 ("M-S-<prior" . drag-stuff-up)
                 ("M-S-<next>" . drag-stuff-down))
    (bind-keys :map drag-stuff-mode-map
               ("M-<up>" . drag-stuff-up)
               ("M-<down>" . drag-stuff-down)))
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  (drag-stuff-global-mode)
  :diminish drag-stuff-mode
  )
#+END_SRC
*** YASnippet [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package yasnippet
  :init
  (setq yas-verbosity 2)
  :config
  (yas-global-mode 1)
  (unbind-key "<tab>" yas-minor-mode-map)
  (unbind-key "TAB" yas-minor-mode-map)
  (bind-key "C-<tab>" 'yas-expand yas-minor-mode-map)
  )
#+END_SRC
*** Buffer-move
https://github.com/lukhas/buffer-move
#+BEGIN_SRC emacs-lisp
(req-package buffer-move
    :bind* ("C-M-#" . buf-move-right)
    ("C-M-ö" . buf-move-left)
    ("C-M-ü" . buf-move-up)
    ("C-M-ä" . buf-move-down)
    )
#+END_SRC
*** Evil-Nerd-Commenter
#+BEGIN_SRC emacs-lisp
(req-package evil-nerd-commenter
  :init
  :config
  (evilnc-default-hotkeys)
)
#+END_SRC
*** Multiple-Cursors
#+BEGIN_SRC emacs-lisp
(req-package multiple-cursors
  :init
  :bind* ("C-<down-mouse-1>" . mc/add-cursor-on-click)
  :config
  (setq mc/list-file (concat user-emacs-directory "config/.mc-lists.el"))
  ;;'(mc/cursor-face ((nil (:background "orange"))))
)
#+END_SRC

*** Google-translate
#+BEGIN_SRC emacs-lisp
(req-package google-translate
  :init
  (require 'google-translate-smooth-ui)
  :bind ("C-c t" . google-translate-smooth-translate)
  :config
  (setq google-translate-translation-directions-alist
	'(("de" . "en") ("en" . "de") ("de" . "fr") ("de" . "es")))
  (setq google-translate-pop-up-buffer-set-focus t)
)
#+END_SRC

*** Outshine
**** Outshine + Navi-Mode
#+BEGIN_SRC emacs-lisp
(req-package outshine
    :init
  ;; because somehow it stopped being activated
  (require 'outshine)
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  ;; (add-hook 'python-mode-hook 'outline-minor-mode)

  :config
  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
  )
(req-package navi-mode
  :init

  :config
  )
#+END_SRC
*** Company-Mode
#+BEGIN_SRC emacs-lisp
(req-package company
:config
(add-hook 'after-init-hook 'global-company-mode)
(define-key company-active-map (kbd "C-ä") 'company-select-next)
(define-key company-active-map (kbd "C-ü") 'company-select-previous)
(setq company-idle-delay 0.2
      company-minimum-prefix-length 1
      company-tooltip-align-annotations t
      company-dabbrev-downcase nil))
#+END_SRC
*** Centered-Window-Mode
#+BEGIN_SRC emacs-lisp
(req-package centered-window-mode
    :init (setq cwm-use-vertical-padding t
                cwm-frame-internal-border 0
                cwm-incremental-padding t
                cwm-incremental-padding-% 2
                cwm-left-fringe-ratio 0
                cwm-centered-window-width 110)
    :config (centered-window-mode t)
    :diminish centered-window-mode
    )
#+END_SRC

*** Smartparens
#+BEGIN_SRC emacs-lisp
(req-package smartparens
  :bind (:map smartparens-mode-map
	      ("C-M-<left>" . sp-backward-sexp)
	      ("C-M-<right>" . sp-forward-sexp)
	      ("C-S-<backspace>" . sp-backward-kill-sexp)
	      ("C-M-<down>" . sp-select-next-thing))
  :init
  (require 'smartparens-config)
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (setq blink-matching-paren nil)
  :config
  (set-face-attribute 'sp-show-pair-match-face nil :foreground "green" :background nil)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil)
  :diminish smartparens-mode
  )
#+END_SRC
*** Undo-Tree
#+BEGIN_SRC emacs-lisp
(req-package undo-tree
    :bind (("C-p" . undo-tree-undo)
           ("M-p" . undo-tree-redo)
           ("C-M-p" . undo-tree-visualize))
    :init
    :config
    (global-undo-tree-mode t)
    (define-key undo-tree-map (kbd "M-_") nil)
    :diminish undo-tree-mode
    )
#+END_SRC
*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+BEGIN_SRC emacs-lisp
;; (setq diff-command "ediff")
;; (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(ediff-split-window-function 'split-window-horizontally)
 )
#+END_SRC
**** Org-mode fix
#+BEGIN_SRC emacs-lisp
;; diff hooks for org mode
(add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
(add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide(buf command &rest cmdargs)
  "If buffer exists and is orgmode then execute command"
  (if buf
      (if (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
	  (with-current-buffer (apply command cmdargs)))
    )
  )

(defun f-ediff-org-unfold-tree-element ()
  "Unfold tree at diff location"
  (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-C 'org-reveal)
  )
;;
(defun f-ediff-org-fold-tree ()
  "Fold tree back to top level"
  (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)
  )
#+END_SRC
*** Expand-Region
#+BEGIN_SRC emacs-lisp
(req-package expand-region
  :bind* (("C-M-w" . er/expand-region)
	      ("C-M-q" . er/contract-region))
  :init
  :config
  (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions)
)
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(req-package flycheck
    :init
  ;; (add-hook 'after-init-hook #'global-flycheck-mode) ;
  :config
  ;; disable jshint since we prefer eslint checking
  ;; (setq-default flycheck-disabled-checkers
	;; 	(append flycheck-disabled-checkers
	;; 		'(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  ;; (flycheck-add-mode 'javascript-eslint 'web-mode)

  ;;https://github.com/justjake/eslint-project-relative
  ;; (when (my-util-installed? "eslint-project-relative")
    ;; (setq flycheck-javascript-eslint-executable "eslint-project-relative"))
  ;; customize flycheck temp file prefix
  ;; (setq-default flycheck-temp-prefix ".flycheck")
  :diminish 'flycheck-mode
  )
#+END_SRC
**** disable in org-src-block
#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook
	  (lambda () (setq-local
		      flycheck-disabled-checkers
		      '(emacs-lisp-checkdoc))))
#+END_SRC
*** helm
#+BEGIN_SRC emacs-lisp
(req-package helm-mode
    :disabled
  :require (dumb-jump)
  :init (helm-mode)
  :config
  (require 'helm-config)
  (setq helm-mode-fuzzy-match t
        helm-recentf-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-locate-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-ff-newfile-prompt-p nil
        helm-find-file-ignore-thing-at-point t
        helm-exit-idle-delay 0
        dumb-jump-selector 'helm)
  (helm-adaptive-mode t)
  :bind(("M-x" . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b" . helm-buffers-list)
        :map helm-find-files-map
        ("C-o" . helm-ff-run-switch-other-window))
  :diminish 'helm-mode
  )
#+END_SRC
**** Ripgrep
#+BEGIN_SRC emacs-lisp
(req-package helm-ag
    :disabled
    :require (helm-mode projectile)
    :config
    (setq helm-ag-base-command
          (format "rg --vimgrep --no-heading --smart-case --ignore-file %s/.config/ripgrep/ignore" (substitute-in-file-name "$HOME"))
          projectile-completion-system 'helm)
    :bind* ("C-M-s" . helm-do-ag-project-root)
    )
#+END_SRC
**** projectile
#+BEGIN_SRC emacs-lisp
(req-package helm-projectile
    :disabled
    :require (helm-mode projectile)
    :init (helm-projectile-on)
    :bind* (("C-M-f" . helm-projectile-find-file)
            ("C-M-d" . helm-projectile-find-dir))
  )
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(req-package ivy
    :loader :elpa
    :commands ivy-mode
    :require (flx dumb-jump counsel)
    :init (ivy-mode 1)
    :config (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          magit-completing-read-function 'ivy-completing-read
          dumb-jump-selector 'ivy)
    :bind(("M-x" . counsel-M-x)
          ("C-x C-f" . counsel-find-file)
          ("C-s" . swiper))
    )
(req-package counsel-projectile
    :require (counsel projectile)
    :loader :elpa
    :config (counsel-projectile-on)
    (setq projectile-completion-system 'ivy))
#+END_SRC
*** ido [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package ido
:init
:config
(ido-mode t)
(ido-everywhere t)
(bind-keys ("M-#" . ido-switch-buffer)
("M-ö" . my/switch-to-previous-buffer))
(bind-keys :map ido-common-completion-map
            ("M-#" . ido-next-match)
            ("M-ö" . ido-prev-match)))
#+END_SRC
**** config [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(setq ido-case-fold t
      ido-enable-flex-matching t
      ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*"
			   "*Messages*" "Async Shell Command"))

;; ;; If a buffer name that doesn't exist is chosen, just make a new one without prompting
;; (setq ido-create-new-buffer 'always)

;; Ignore the .aux extensions that TeX programs create
(setq completion-ignored-extensions
      (cons "*.aux" completion-ignored-extensions))


;;; Ignore files defined in variable completion-ignored-extensions
(setq ido-ignore-extensions t)

;;; Order extensions by how I use them
(setq ido-file-extensions-order '(".tex"  ".txt" ".py" ".sh" ".el" ".xml" ".htm"))

;;; Keep annoying buffers out of my face
(setq ido-ignore-buffers (list (rx (or (and bos  " ")
                                       (and bos
                                            (or "*Completions*"
                                                "*Shell Command Output*"
                                                "*vc-diff*")
                                            eos)))))

;;(add-to-list 'ido-ignore-files "\\`media/")
#+END_SRC
**** flx-ido [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package flx-ido
:init
(flx-ido-mode 1)

:config
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
:ensure t)
#+END_SRC
**** smex [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package smex
:bind ("M-x" . smex)
:init
:config
:ensure t
)
#+END_SRC
*** Space-line
[[https://github.com/TheBB/spaceline/tree/master/][The Spacemacs Modeline @github]]
#+BEGIN_SRC emacs-lisp
(req-package spaceline
  :init
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)

  :config
  (spaceline-toggle-buffer-size-off)
  )
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(req-package projectile
    :loader :elpa
    :init (projectile-mode)
    :config
    (setq projectile-file-exists-remote-cache-expire nil
          projectile-switch-project-action 'magit-status
          projectile-enable-caching t)
    :bind* (("C-M-r" . projectile-replace-regexp))
    :diminish 'projectile-mode
    )
#+END_SRC
*** Floobits [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package floobits)
#+END_SRC
*** aggressive-indent [disabled]
[[https://github.com/Malabarba/aggressive-indent-mode][@github.com]]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package aggressive-indent
    :init (global-aggressive-indent-mode 1)
    
#+END_SRC
*** which-key
[[https://github.com/justbur/emacs-which-key?utm_medium=referral&utm_campaign=ZEEF&utm_source=https%3A%2F%2Femacs.zeef.com%2Fehartc][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package which-key
    :init (which-key-mode)
    :diminish which-key-mode)
#+END_SRC
*** dumb-jump
[[https://github.com/jacktasia/dumb-jump][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package dumb-jump
    :config (setq dumb-jump-force-searcher 'rg)
    :bind ("M-." . dumb-jump-go)
    )
#+END_SRC
*** pomodoro
#+BEGIN_SRC emacs-lisp
(req-package pomodoro
    :config (pomodoro-add-to-mode-line)
    (setq pomodoro-time-format "%.2m"
          pomodoro-play-sounds nil
          pomodoro-work-time 20
          pomodoro-break-time 10
          pomodoro-long-break-time 20
          pomodoro-nth-for-longer-break 3))
#+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
(req-package yaml-mode
    :mode "\\.yml\\'")
#+END_SRC
** Editorconfig
#+BEGIN_SRC emacs-lisp
(req-package editorconfig
    :init (editorconfig-mode 1)
    :diminish editorconfig-mode
    )
#+END_SRC
** Read user $PATH
#+BEGIN_SRC emacs-lisp
(req-package  exec-path-from-shell
    :if (my-util-linux?)
    :init (exec-path-from-shell-initialize)
    )
#+END_SRC
** logview [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package logview
    :commands logview-mode)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(req-package magit
    :ensure t
    :config
    (exec-path-from-shell-copy-env "GPG_TTY")
    (setq magit-diff-arguments (quote ("--no-ext-diff" "--stat"))
          magit-diff-section-arguments (quote ("--no-ext-diff" "-U2"))
          magit-diff-refine-hunk t)
    )
#+END_SRC
*** ssh
**** windows
[[https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package ssh-agency
  :if (my-util-win?)
  :init
  (setenv "SSH_ASKPASS" "git-gui--askpass")
  )
#+END_SRC
*** git-timemachine [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package git-timemachine)
#+END_SRC
** Org-Mode
#+BEGIN_SRC emacs-lisp
(req-package org
    :require org-plus-contrib
    :config
    (setq org-startup-indented t
      org-blank-before-new-entry '((heading . nil)
				  (plain-list-item . nil))
      org-return-follows-link nil
      org-completion-use-ido t
      org-image-actual-width '(500)
      org-list-allow-alphabetical t
      org-use-property-inheritance t
      org-use-sub-superscripts nil
      org-checkbox-hierarchical-statistics t
      org-default-notes-file (concat meinAll-dir "milkyway.org"))
    
    (require 'org-checklist)
    (add-to-list 'org-modules 'org-checklist)
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb))
    :diminish org-indent-mode)

(req-package my-org
    :bind (:map org-mode-map
                ("C-c C-M-e" . my-org-export-all))
    :load-path "els/my-org/")
#+END_SRC
*** Config
**** Export
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil
      org-export-with-section-numbers nil)
#+END_SRC
**** Capture
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t
      org-datetree-add-timestamp 1
      org-extend-today-until 6
      org-outline-path-complete-in-steps nil
      org-hide-emphasis-markers t
      org-time-stamp-custom-formats '("<%e. %B '%y>" . "<%b %e, %Y %H:%M>")
      org-refile-targets '((nil :level . 2)))
(setq-default org-display-custom-times t)
(bind-key "C-c c" 'org-capture)
#+END_SRC
***** Functions
****** My/insert-link
#+BEGIN_SRC emacs-lisp
;; TODO change minibuffer prompt while read-from-minibuffer to display Url: or File: in minibuffer prompt depending on what is inserted
;; TODO maybe change stevinho.justnetwork.eu from @justnetwork.eu to @stevinho.eu
;; replace www. and use first and last (idea)
(defun my/insert-link ()
  (interactive)
  (let* ((keymap (copy-keymap minibuffer-local-map))
	 (get-stored-link
	  '(lambda ()
	     (setq url (caar org-stored-links))
	    (if url
		(concat "::" (car (last (split-string (nth 1 (split-string url "[\\:]")) "[\\/]"))))
	      nil)))
	 (get-url-link
	  '(lambda ()
	     (setq url (org-get-x-clipboard 'CLIPBOARD))
	     (if (string= (substring url 0 4) "http")
		 (let* ((urlParts
			 (last (split-string (nth 2 (split-string url "[\\/]")) "[\\.]") 2)))
		   (concat "@" (nth 0 urlParts) "." (nth 1 urlParts)))
	       nil
	       )))
	 url urlDescription)

    (define-key keymap (kbd "<tab>")
      (lambda () (interactive)
	(let (link message)
	  (if (string= "@" (substring (minibuffer-contents) 0 1))
	      (setq link (funcall get-stored-link)
		    message "No link stored")
	    (setq link (funcall get-url-link)
		  message "No Url in Clipboard"))
	  (if link (progn
		     (delete-minibuffer-contents)
		     (insert link))
	    (minibuffer-message message))
	  )))

    (define-key keymap (kbd "C-g")
      (lambda () (interactive)
	(delete-minibuffer-contents)
	(exit-minibuffer)
	))
    (setq urlDescription
	  (or (funcall get-url-link) (funcall get-stored-link)))

    (if urlDescription
	(progn
	  (setq urlDescription (read-from-minibuffer "Link" urlDescription keymap))
	  (if (string= "" urlDescription)
	      (minibuffer-message "Aborted")
	    (insert (format "[[%s][%s]]" url urlDescription))))
      (minibuffer-message "No Link to insert. Aborted"))
    ))
#+END_SRC
**** Babel
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (setq org-babel-sh-command "C:/cygwin64/bin/bash.exe"))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-pretty-entities t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window
      org-edit-src-auto-save-idle-delay 60)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (gnuplot . t)
   (sh . t)
   (sql . t)))
#+END_SRC
**** Passwords
#+BEGIN_SRC emacs-lisp
(req-package org-passwords
    :load-path "els/org-passwords/"
    :config (setq org-passwords-file (expand-file-name meinAll-dir
                                                       "monument/lesMysteres.gpg")))
;; http://barrenfrozenwasteland.com/2015/06/configuring-pass-on-windows/
(req-package pass
:init (exec-path-from-shell-copy-env "PASSWORD_STORE_DIR")
    :config )
#+END_SRC
**** Encryption
#+BEGIN_SRC  emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
(require 'epa-file)
(setq epa-file-select-keys nil)
#+END_SRC
**** Latex
#+BEGIN_SRC emacs-lisp
;;(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-preview-ltxpng-directory (concat temporary-file-directory "ltxpng/"))
#+END_SRC
*** Style
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 `(org-level-4 ((t (:foreground "darkorange"))))
 `(org-level-2 ((t (:foreground "cadet blue"))))
 `(org-level-3 ((t (:foreground "#b75761"))))
 `(org-property-value ((t (:foreground "purple"))))
 `(org-special-keyword ((t (:foreground "#990099"))))
 `(org-link ((t (:foreground "bisque4"))))
 ;; weird issue with line-wrap, wrapped lines (the indent) don't get this face
 ;; `(org-block-background ((t (:background "#133436"))))
 ;; Underline/overline is weird
 ;; `(org-block-begin-line ((t (:foreground ,"#446a5d" :underline ,"#b3e"))))
 ;; `(org-block-end-line ((t (:foreground ,"#446a5d" :overline  ,"#b3e"))))
 `(org-block-begin-line ((t (:foreground ,"#446a5d"))))
 `(org-block-end-line ((t (:foreground ,"#446a5d"))))
 )
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
(defun org-sentence-newline()
  (interactive)
  (org-backward-sentence)
  (org-delete-backward-char 1)
  (org-return-indent))
(defun my/org-delete-heading-or-line ()
  (interactive)
  (if (org-at-heading-p)
      (org-cut-subtree)
    (kill-line)))
#+END_SRC
**** Checkboxes toggle DONE State (not working)
[[http://osdir.com/ml/emacs-orgmode-gnu/2010-05/msg00506.html][mailinglist]]
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-summary-todo-checkbox (c-on c-off)
  "Switch entry to DONE when all subentry-checkboxes are done, to TODO otherwise."
  (outline-previous-visible-heading 1)
  (let (org-log-done org-log-states)	; turn off logging
    (org-todo (if (= c-off 0) "DONE" "TODO"))))
(add-hook 'org-checkbox-statistics-hook 'org-summary-todo-checkbox)
#+END_SRC
**** Insert Image
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-insert-image (url name)
"Take a screenshot into a time stamped unique-named file in the
sub-directory (%filenameIMG) as the org-buffer and insert a link to this file."
(interactive "sEnter url: \nsEnter file name: ")

(setq foldername (concat user-emacs-directory "meinAll/media/" (file-name-base buffer-file-name) "/"))
(if (not (file-exists-p foldername))
  (mkdir foldername))

(setq imgName (concat
	       (format "%s." name) (nth 0 (last(split-string url "\\.")))))
(setq imgPath (concat foldername imgName))

(url-copy-file url imgPath)

(setq width (let
		((w (car (image-size (create-image imgPath) :pixel))))
	      (if (> w 500) 500 w)))

(insert (format "#+ATTR_HTML: :width %dpx" width))
(newline-and-indent)
(insert (concat "[[" imgPath "]]"))
(newline-and-indent)
(insert (concat ":PROPERTIES:"))
(newline-and-indent)
(insert (concat ":Quelle: [[" url "][Quelle]]"))
(newline-and-indent)
(insert (concat ":END:"))
(org-display-inline-images nil t))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(bind-keys :map org-mode-map
("<return>" . org-return-indent)
("M-S-<delete>" . my/org-delete-heading-or-line)
("C-M-<left>" . org-backward-sentence)
("C-M-<right>" . org-forward-sentence)
("C-M-<end>" . org-sentence-newline)
("C-c l" . my/insert-link))
#+END_SRC
**** chromebook
#+BEGIN_SRC emacs-lisp
(when (my-util-cb?)
    (bind-keys :map org-mode-map
	       ("M-S-<prior>" . org-shiftmetaup)
	       ("M-S-<next>" . org-shiftmetadown)
	       ;; ("M-right" . drag-stuff-right)
	       ;; ("M-right" . drag-stuff-left)
	       ))
#+END_SRC
*** MeinAll
**** Functions
#+BEGIN_SRC emacs-lisp
(defun new-movie(title)
  "Add a new movie to "
  (interactive "sTitel: ")
  (let ((headline (if (y-or-n-p "Have you seen it already?")
		      "Watched"
		    "To Watch")))
    headline
    ))
#+END_SRC
** AUCTeX
#+BEGIN_SRC emacs-lisp
(req-package tex
  :init
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  :config
  :ensure auctex
)
#+END_SRC
** NeoTree [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package neotree
    :commands neotree
    )
#+END_SRC
** Dired+
#+BEGIN_SRC emacs-lisp
(req-package dired+
    :config
  (toggle-diredp-find-file-reuse-dir 1)
  (setq dired-listing-switches "-aDhl  --group-directories-first")
  :bind (:map dired-mode-map
              ("?" . my/dired-get-size))
  )
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
(defun my/dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
               (progn
                 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		 (match-string 1))))))
#+END_SRC
** Ispell/Aspell
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "C:\\cygwin64\\bin\\aspell.exe"
      ispell-really-aspell t
      ispell-extra-args '("--sug-mode=fast")
      ;; TODO name deutsch+english
      ispell-dictionary "deutsch"
      flyspell-issue-message-flag nil)
#+END_SRC
*** Aspell - spell checking for multiple languages
[[https://wiki.archlinux.org/index.php/User:Georgek][@wiki.archlinux]]
combine dictionary deutsch + english
#+BEGIN_SRC sh :tangle no
# TODO replace ru with de
cd /usr/lib/aspell
grep '^special' en.dat >>ru.dat
aspell dump master en >w.en
aspell dump master ru-yo >w.ru
cat w.ru w.en >w.all
aspell --lang=ru --encoding=UTF-8 create master ruen.rws < w.all
rm -f w.ru w.en w.all
echo "add ruen.rws" > ru.multi
#+END_SRC
** Languages
*** Elixir
**** Elixir Mode
https://github.com/elixir-lang/emacs-elixir
#+BEGIN_SRC emacs-lisp
(req-package elixir-mode
    :defer t
    :config
    (my/add-format-before-save 'elixir-mode-hook)
    )
#+END_SRC
**** Alchemist
https://github.com/tonini/alchemist.el
#+BEGIN_SRC emacs-lisp
(req-package alchemist
    :require elixir-mode
    :commands alchemist-mode
    :init (add-hook-exec 'elixir-mode 'alchemist-mode)
    :bind (:map alchemist-mode-map
                ("C-c C-c" . alchemist-iex-compile-this-buffer)
                ("C-c a s" . my/phoenix-start))
    :config
    (defun my/phoenix-start ()
      (interactive)
      (if (alchemist-project-p)
          (let ((default-directory (alchemist-project-root)))
            (pop-to-buffer
             (process-buffer
              (or (if (buffer-live-p alchemist-iex-buffer)
                      (get-buffer-process alchemist-iex-buffer))
                  (progn
                    (alchemist-iex-start-process '("iex" "-S" "mix" "phx.server"))
                    (alchemist-iex-process))))
             ))))
    )
#+END_SRC
**** 
**** flycheck-credo
#+BEGIN_SRC emacs-lisp
(req-package flycheck-credo
    :require (elixir-mode flycheck)
    :init
    (flycheck-credo-setup)
    (add-hook-exec 'elixir-mode 'flycheck-mode)
    :config
    (setq flycheck-elixir-credo-strict nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
(req-package markdown-mode
    :mode "\\.md\\'"
    )
#+END_SRC
*** Python
**** Elpy
#+BEGIN_SRC emacs-lisp
(req-package elpy
    :init
  (elpy-enable)
  :config
  ;; https://github.com/jorgenschaefer/elpy/issues/887
  ;; probvably enable again, its new with emacs 25
  (setq python-shell-completion-native-enable nil)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (if (executable-find "ipython")
      ;; (elpy-use-ipython)
      (message "'ipython' not found found; please install"))
  ;; Currently no debugging in elpy afaik
  ;; (setq elpy-test-pytest-runner-command '("py.test --pdb")) ;
  ;; (elpy-set-test-runner 'elpy-test-pytest-runner)
  (setq elpy-rpc-backend "rope"
        elpy-rpc-python-command "python")
  )
#+END_SRC
**** IPython Emacs Notebook (EIN)
#+BEGIN_SRC emacs-lisp
(req-package cl-generic)
(req-package ein
    :commands ein:notebooklist-open
  )
#+END_SRC
**** My Functions
***** Jump-to-test
#+BEGIN_SRC emacs-lisp
(defun my/jump-to-test ()
  (interactive)

  (let* ((file-name
	  (nth 0 (last (split-string buffer-file-name "[\\/]"))))
	 (test-file
	  (s-join "/" (append (butlast (split-string buffer-file-name "[\\/]"))
			      (list (concat "test_" file-name)))))
	 (func-name "")
	 (func-args (progn
		      (unless (looking-at "def")
			(python-nav-beginning-of-defun))
		      (right-word)
		      (right-char)
		      (set-mark (point))
                      (while (not (looking-at "("))
			(sp-forward-sexp))
		      (setq func-name (buffer-substring-no-properties (mark) (point)))
		      (set-mark (point))
		      (sp-forward-sexp)
		      (buffer-substring-no-properties (mark) (point)))))
    (with-current-buffer (find-file test-file)
      (goto-char (point-min))
      (unless (search-forward-regexp "from .+ import \\*" nil t)
	(insert (concat "from "
			(replace-regexp-in-string "\\.py" "" "calc.py")
			" import *\n")))
      (let ((test-func (concat "test_" func-name)))
	(unless (search-forward test-func nil t)
	  (goto-char (point-max))
	  (insert "\n"
		  (format "def %s():\n" test-func)
		  (format "\tassert %s%s == " func-name func-args))))
      )))
#+END_SRC
*** Web
**** HTML/CSS
***** Htmlize
#+BEGIN_SRC emacs-lisp :tangle no
(req-package htmlize)
#+END_SRC
***** css
#+BEGIN_SRC emacs-lisp
(req-package css-mode
    :mode "\\.less\\'"
    :config
    (setq css-indent-offset 4)
    (my/add-format-before-save 'css-mode-hook)
    )
#+END_SRC
***** Scss-Mode [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package scss-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
  (my/add-format-before-save 'scss-mode-hook)
  :config
)
#+END_SRC
***** Emmet-Mode [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package emmet-mode
  :init
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  :config
)
#+END_SRC
**** JS
***** js2-mode
#+BEGIN_SRC emacs-lisp
(req-package js2-mode
    :mode "\\.js\\'"
    :config
    (my/add-format-before-save 'js-mode-hook)
    (setq js2-basic-offset 2
          js2-strict-inconsistent-return-warning nil)
    )
#+END_SRC
***** Web-mode
[[http://web-mode.org/][@web-mode.org]]
#+BEGIN_SRC emacs-lisp
(req-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'")
    :config
    (require  'company-web-html)
    (my/add-format-before-save 'web-mode-hook)
    (setq web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-attr-indent-offset 2
          web-mode-attr-value-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-style-padding 2
          web-mode-script-padding 0
          web-mode-block-padding 0
          web-mode-enable-control-block-indentation nil
          web-mode-enable-auto-closing t
          web-mode-content-types-alist
          '(("css" . "\\.\\(s?css\\|css\\.erb\\)\\'")
            ("jsx" . "\\.\\([jt]s\\|[jt]s\\.erb\\)\\'")
            ("json" . "\\.\\(api\\|json\\|jsonld\\)\\'")
            ("jsx" . "\\.[jt]sx\\'")
            ("xml" . "\\.xml\\'")
            ("html" . ".")))
    )
#+END_SRC
***** json-mode
#+BEGIN_SRC emacs-lisp
(req-package json-mode
    :mode "\\.json\\'"
    :config
    (setq json-reformat:indent-width 2
          js-indent-level 2)
    )
#+END_SRC
***** typescript
#+BEGIN_SRC emacs-lisp
(req-package tide
    :require (company flycheck)
    :commands tide-setup
    :init
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-add-next-checker 'typescript-tide '(t . typescript-tslint) 'append)
      (my/use-tslint-from-node-modules)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (add-hook 'before-save-hook 'tide-format-before-save nil 'local)
      (company-mode +1))
    
    (add-hook-exec 'typescript-mode 'setup-tide-mode)
    :config
    (defun my/use-tslint-from-node-modules ()
      (let* ((root (locate-dominating-file (or (buffer-file-name) default-directory) "node_modules"))
             (tslint (and root (expand-file-name "node_modules/tslint/bin/tslint" root))))
        (when (and tslint (file-executable-p tslint))
          (setq-local flycheck-typescript-tslint-executable tslint))))

    (setq company-tooltip-align-annotations t
          tide-tsserver-executable "node_modules/typescript/bin/tsserver"
          typescript-indent-level 2)
    :bind (:map tide-mode-map
                ("C-f" . tide-fix))
    )
#+END_SRC
*** Elisp
#+BEGIN_SRC emacs-lisp
(setq lisp-indent-function 'common-lisp-indent-function)
(bind-key "C-h C-f" 'find-function-at-point emacs-lisp-mode-map)
(bind-key "C-h C-v" 'find-variable-at-point emacs-lisp-mode-map)
#+END_SRC
*** Php
#+BEGIN_SRC emacs-lisp
(req-package php-mode
    :mode "\\.php\\'")
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(req-package rust-mode
    :mode "\\.rs\\'"
    )
(req-package company-racer
    :require company
    :init
    (add-to-list 'company-backends 'company-racer)
    (add-hook 'racer-mode-hook #'company-mode))
(req-package racer
    :config
  (setq racer-cmd "~/.cargo/bin/racer.exe"
        racer-rust-src-path "C:/Program Files/Rust/source/src/")
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode))
(req-package cargo
    :require rust-mode
    :init (add-hook 'rust-mode-hook 'cargo-minor-mode)
    :config
    (defun cargo-process--cleanup (buffer)
      (when (get-buffer-process (get-buffer buffer))
        (delete-process buffer)))
    (defvar cargo-process-history '())
    (defun cargo-process-run ()
      "Run the Cargo run command.
With the prefix argument, modify the command's invocation.
Cargo: Build and execute src/main.rs."
      (interactive)
      (cargo-process--start
       "Run"
       (read-string "Command: " "cargo run" '(cargo-process-history . 0))))

    (defun cargo-process-test (enable_print)
      "Run the Cargo test command.
With the prefix argument, modify the command's invocation.
Cargo: Run the tests."
      (interactive "P")
      (let* ((command "cargo test"))
        (when enable_print
          (concat command " -- --nocapture"))
        (cargo-process--start "Test" "cargo test"))
      )
    )
(req-package flycheck-rust
    :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
*** go
#+BEGIN_SRC emacs-lisp
(req-package go-mode
    :require company-go go-eldoc
    :init (exec-path-from-shell-copy-env "GOPATH")
    :config (add-hook 'go-mode-hook
                      (lambda ()
                        (set (make-local-variable 'company-backends) '(company-go))
                        (add-hook 'before-save-hook 'gofmt-before-save nil 'local)
                        (go-eldoc-setup)
                        (flycheck-mode)
                        (company-mode)))
    )
#+END_SRC
*** nim
#+BEGIN_SRC emacs-lisp
(req-package nim-mode
    :init
  (add-hook 'nim-mode-hook 'nimsuggest-mode)
  (add-hook 'nim-mode-hook 'company-mode)
  (add-hook 'nim-mode-hook flycheck-mode)
  (add-hook 'nimscript-mode-hook 'company-mode)
  )
#+END_SRC
** mini
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq same-window-buffer-names '("*Help*"))
#+END_SRC
*** Disabled
maybe for linux
#+BEGIN_SRC emacs-lisp :tangle no
(setq select-active-regions nil)
#+END_SRC
**** jabber
#+BEGIN_SRC emacs-lisp :tangle no
(setq jabber-account-list
      '(("jan.moeller0@gmail.com"
	 (:network-server . "talk.google.com")
	 (:connection-type . ssl)
	 (:port . 5223))))
#+END_SRC
*** Hungry-delete
#+BEGIN_SRC emacs-lisp
(req-package hungry-delete
    :init (global-hungry-delete-mode)
    :config
    )
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
(req-package restclient)
#+END_SRC
** Els
*** Spell-number
#+BEGIN_SRC emacs-lisp
(req-package spell-number
             :load-path "els/spell-number/")
#+END_SRC
*** Exercism [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package exercism
    :load-path "els/exercism/"
    :if (my-util-installed? "exercism")
    :config (when (my-util-win?)
	      (setq *exercism-cmd*
		    (shell-quote-argument "C:\\\\Program Files\\\\Exercism\\\\exercism.exe"))))
#+END_SRC
** Dev
*** Namespaces elisp
[[https://github.com/Malabarba/Nameless][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package nameless
  :init
  :config
  (setq nameless-private-prefix t)
)
#+END_SRC
*** Testing
[[https://github.com/promethial/xtest#simple-buffer-testing][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package xtest
  :init
  :config
)
#+END_SRC
** Other
*** Sqlite [disabled]
#+BEGIN_SRC emacs-lisp :tangle no
(req-package esqlite
  :init
  :config
)
#+END_SRC
*** Sql-Indent
#+BEGIN_SRC emacs-lisp
(req-package sql-indent
  :init
  :config
)
#+END_SRC
** My
*** Bonjournal
#+BEGIN_SRC emacs-lisp
(req-package bonjournal
             :load-path "els/bonjournal/"
             :config (setq bonjournal-dir (expand-file-name meinAll-dir
                                                            "monument/bonjournal/"))
             )
#+END_SRC
*** Bonquest
#+BEGIN_SRC emacs-lisp :tangle no
(req-package bonquest
    :require request-deferred
    :load-path "els/bonquest/"
    )
#+END_SRC
*** Toutesuit
[[https://github.com/promethial/xtest#simple-buffer-testing][@github.com]]
#+BEGIN_SRC emacs-lisp
(req-package toutesuit
             :load-path "els/toutesuit/"
             :config (setq toutesuit-file (expand-file-name
                                           meinAll-dir "lookingGlass/toutesuit.org")))
#+END_SRC
** Cygwin
*** Cygwin-Mount
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (setenv "PATH" (concat "c:/cygwin64/bin;" (getenv "PATH")))
  (setq exec-path (cons "c:/cygwin64/bin/" exec-path))
  (req-package cygwin-mount
      :load-path "els/cygwin/"
      :config (cygwin-mount-activate)
      ))
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
** Theme
moved to bottom because cursor color changed by smth else
#+BEGIN_SRC emacs-lisp
(req-package soft-stone-theme
  :config
  (load-theme 'soft-stone t)
  )
#+END_SRC
*** Alternatives
- Soft-Morning
*** Cursor
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'region nil :background "darkblue")
(setq-default cursor-type 'bar)
#+END_SRC
** quickrun
#+BEGIN_SRC emacs-lisp
(req-package quickrun)
#+END_SRC
** wakatime
#+BEGIN_SRC emacs-lisp
(req-package wakatime-mode
    :loader :elpa
    :commands (global-wakatime-mode)
)
#+END_SRC
* Finish req-package
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
* Functions
** Line manouevor functions
*** New-line-above
#+BEGIN_SRC emacs-lisp
(defun new-line-above ()
  "Insert a newline above the current line and put point at beginning."
  (interactive)
  (unless (bolp)
    (beginning-of-line))
  (newline)
  (forward-line -1)
  (indent-according-to-mode))
#+END_SRC
*** New-line-below
#+BEGIN_SRC emacs-lisp
(defun new-line-below ()
  "Insert a newline below the current line and put point at beginning."
  (interactive)
  (unless (eolp)
    (end-of-line))
  (newline-and-indent))
#+END_SRC
*** Copy-line-or-Region
#+BEGIN_SRC emacs-lisp
(defun xah-copy-line-or-region ()
  "Copy current line, or text selection.
When `universal-argument' is called first, copy whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-end-position)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-ring-save p1 p2)))

(bind-key "M-w" 'xah-copy-line-or-region)
#+END_SRC
*** Cut-line-or-Region
#+BEGIN_SRC emacs-lisp
(defun xah-cut-line-or-region ()
  "Cut current line, or text selection.
When `universal-argument' is called first, cut whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-beginning-position 2)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-region p1 p2)))

(bind-key "C-w" 'xah-cut-line-or-region)
#+END_SRC
*** More
#+BEGIN_SRC emacs-lisp
(defun my/delete-whitespace-or-word ()
  (interactive)
  (if (looking-at "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (delete-word)))

(defun my/backward-delete-whitespace-or-word ()
  (interactive)
  (if (looking-back "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (backward-delete-word)))

(bind-key "C-<backspace>" 'my/backward-delete-whitespace-or-word)
(bind-key "C-M-<backspace>" 'my/delete-whitespace-or-word)

;; because back-to-indentation doesn't take me back to visual line
(defun my/back-to-indentation ()
  (interactive)
  (beginning-of-visual-line)
  (indent-for-tab-command))

(bind-key "C-a" 'my/back-to-indentation)
#+END_SRC
** Not in use
*** Delete-No-Kill
#+BEGIN_SRC emacs-lisp
;; maybe kill is actually okay
(defun delete-line-no-kill ()
  (interactive)
  (delete-region
   (line-end-position 0)
   (line-end-position))
  (indent-for-tab-command))

(defun backward-delete-word()
  (interactive)
  (delete-region (point) (progn (backward-word) (point))))

(defun delete-word()
  (interactive)
  (delete-region (point) (progn (forward-word) (point))))
#+END_SRC
*** switch to previous buffer
[[http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/][emacsredux.com]]
#+BEGIN_SRC emacs-lisp
(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
*** Useless?
#+BEGIN_SRC emacs-lisp
(defun find-file-right()
  (interactive)
  (split-window-right)
  (ido-find-file-other-window))

(defun space-right()
  (interactive)
  (insert-char 32)
  (left-char))

(defvar xah-switch-buffer-ignore-dired t)
(defun xah-previous-user-buffer ()
  "Switch to the previous user buffer.
 `user buffer' is a buffer whose name does not start with `*'.
If `xah-switch-buffer-ignore-dired' is true, also skip directory buffer.
2015-01-05 URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'"
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (or
           (string-equal "*" (substring (buffer-name) 0 1))
           (if (string-equal major-mode "dired-mode")
               xah-switch-buffer-ignore-dired
             nil
             ))
          (progn (previous-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))


(defun xah-next-user-buffer ()
 "Switch to the next user buffer.
 `user buffer' is a buffer whose name does not start with `*'.
If `xah-switch-buffer-ignore-dired' is true, also skip directory buffer.
2015-01-05 URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'"
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (or
           (string-equal "*" (substring (buffer-name) 0 1))
           (if (string-equal major-mode "dired-mode")
               xah-switch-buffer-ignore-dired
             nil
             ))
          (progn (next-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))
#+END_SRC
** goto code
#+BEGIN_SRC emacs-lisp
(defun goto-code()
(interactive)
  (dired "~/code")
  )
#+END_SRC
** Misc
*** Sudo-Save (Linux)
#+BEGIN_SRC emacs-lisp
(if (my-util-linux?)
    (defun sudo-save ()
      (interactive)
      (if (not buffer-file-name)
	  (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
	(write-file (concat "/sudo:root@localhost:" buffer-file-name)))))
#+END_SRC
*** Capitalize Word
#+BEGIN_SRC emacs-lisp
(defun my/capitalize-previous-word()
  (interactive)
  (capitalize-word -1))
  (bind-key "M-c" 'my/capitalize-previous-word org-mode-map)
#+END_SRC
* Emacs Server (Windows)
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (server-start))
#+END_SRC
* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* meta
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]]
*** [[https://github.com/jwiegley/dot-emacs][jwiegley dot-emacs]]
*** [[https://www.reddit.com/r/emacs/comments/3obmoh/emacs_for_writers_presentation_by_jay_dixit/][Emacs for writers]]
- org-bullets
** packages maybe Futur
*** Focus [[https://github.com/larstvei/Focus/blob/master/README.md][@github.com]]
*** finance https://github.com/ledger/ledger-mode
** todo
- magit diff args -> git global config
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)
