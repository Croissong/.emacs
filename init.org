; -*- eval: (org-init-mode 1); lexical-binding: t -*-
* Core
** Package manager
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t
      use-package-compute-statistics nil
      comp-async-report-warnings-errors nil)
#+end_src

** Common
*** Utility
#+begin_src emacs-lisp
(use-package bind-key)
(use-package delight)
(use-package cl-lib)
(use-package f)
(use-package dash)
(use-package a)

(use-package my-util
    :straight (:local-repo "~/.config/emacs/my/util/")
    :demand t
    :bind
    ("C-<backspace>" . my-util-backward-delete-whitespace-or-word)
    ("C-x <tab>"  . my-util-indent-rigidly))

(use-package org-init
    :straight (:local-repo "~/.config/emacs/my/org-init/")
    :commands (org-init-mode org-init-open))
#+end_src

*** Config
#+begin_src emacs-lisp
(use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-arguments '("-i")
          exec-path-from-shell-variables '("DISPLAY"))
    (my-util-with-eval-after-frame
     (exec-path-from-shell-initialize)))

(setq default-directory "~/"
      custom-file (expand-file-name "custom.el" user-emacs-directory)
      browse-url-generic-program (executable-find (getenv "BROWSER"))
      browse-url-generic-args '("--enable-features=UseOzonePlatform" "--ozone-platform=wayland")
      browse-url-browser-function 'browse-url-generic
      require-final-newline t
      read-process-output-max (* 1024 1024) ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
      enable-local-eval t
      mouse-wheel-scroll-amount '(2 ((shift) . 2))
      mouse-wheel-progressive-speed nil
      same-window-buffer-names '("*Help*")
      Man-notify-method 'pushy

      vc-handled-backends nil
      (put 'upcase-region 'disabled nil)
      (put 'downcase-region 'disabled nil)

      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'text-mode

      ring-bell-function 'ignore
      vc-follow-symlinks t

      ;; Kill active process buffer no prompt
      kill-buffer-query-functions (remq 'process-kill-buffer-query-function kill-buffer-query-functions)

      display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))

(fset 'yes-or-no-p 'y-or-n-p)
(delete-selection-mode 1)

(setq-default indent-tabs-mode nil
              tab-width 2
              sentence-end-double-space nil)
#+end_src

**** Long lines fix
#+begin_src emacs-lisp
(require 'longlines)
(global-so-long-mode 1)
(setq so-long-target-modes (-union so-long-target-modes '(fundamental-mode))
      so-long-action 'longlines-mode)

#+end_src

*** Editing
#+begin_src emacs-lisp
(setq help-char 9) ;; tab
(bind-keys*
 ("C-M-b" . eval-defun)
 ("C-l" . goto-line)
 ("M-_" . shell-command))

(bind-keys
 ("C-^" . quoted-insert)
 ("M-ö"  . left-char)
 ("M-#" . right-char)
 ("M-ü" . previous-line)
 ("M-ä" . next-line)
 ("C-a" . back-to-indentation)

 ;; disable overwrite
 ("<insert>" . nil)

 ("M-q" . universal-argument)

 ;; disable mouse-wheel zoom
 ("<C-mouse-4>" . nil)
 ("<C-mouse-5>" . nil)
 ("<f5>" . profiler-start)
 ("<f6>" . profiler-stop))

(delight 'eldoc-mode nil "eldoc")
#+end_src

*** coding system
[[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][@masteringemacs]]
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

*** debugging
#+begin_src emacs-lisp
(use-package gcmh
  :init (gcmh-mode 1)
  :delight)

(use-package explain-pause-mode
  :straight (:host github :repo "lastquestion/explain-pause-mode")
  :commands explain-pause-mode)

(use-package esup
  :custom
  (esup-depth 0)
  :commands esup)
#+end_src

*** backup & auto-save
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+begin_src emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      create-lockfiles nil
      kept-old-versions 2
      version-control t
      backup-by-copying t
      emacs-tmp-dir (my-util-ensure-dir user-emacs-directory "tmp/")
      emacs-backup-dir (my-util-ensure-dir emacs-tmp-dir "backups/")
      emacs-autosave-dir (my-util-ensure-dir emacs-tmp-dir "autosaves/")
      backup-directory-alist `(("." . ,emacs-backup-dir))
      auto-save-file-name-transforms `((".*" ,emacs-autosave-dir t))
      auto-save-list-file-prefix emacs-autosave-dir)
#+end_src

*** buffer & window management
#+begin_src emacs-lisp
(winner-mode 1)

(bind-keys*
 ("C-ö" . windmove-left)
 ("C-#" . windmove-right)
 ("C-ü" . windmove-up)
 ("C-ä" . windmove-down)
 ("C-1" . delete-other-windows)
 ("C-2" . split-window-right)
 ("C-3" . split-window-below)
 ("C-M-1" . winner-undo)
 ("C-M-2" . winner-redo)

 ("C-M-k" . kill-this-buffer)
 ("M-r" . revert-buffer))

(use-package eyebrowse
    :init
    (eyebrowse-mode t)
    :bind*
    ("M-1" . eyebrowse-switch-to-window-config-1)
    ("M-2" . eyebrowse-switch-to-window-config-2)
    ("M-3" . eyebrowse-switch-to-window-config-3)
    ("M-4" . eyebrowse-switch-to-window-config-4)
    ("M-5" . eyebrowse-switch-to-window-config-5)
    ("M-6" . eyebrowse-switch-to-window-config-6))

(use-package buffer-move
    :bind*
     ("C-M-#" . buf-move-right)
     ("C-M-ö" . buf-move-left)
     ("C-M-ü" . buf-move-up)
     ("C-M-ä" . buf-move-down))
#+end_src

** secrets
#+begin_src emacs-lisp
(use-package auth-source-pass
  :init (auth-source-pass-enable)
  :custom (auth-sources '(password-store)))

(use-package
  epa-file
  :straight nil
  :custom (epa-file-select-keys nil))

(use-package secrets)
#+end_src

* general
** org-mode
#+begin_src emacs-lisp
(use-package reveal
    :hook (org-mode . reveal-mode)
    :delight reveal-mode)

(use-package org
    :straight org-plus-contrib
    :mode ("\\.org\\'" . org-mode)
    :config
    (require 'org-checklist)
    (org-indent-mode 1)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (python . t)
       (gnuplot . t)
       (shell . t)
       (sql . t)))

    :custom
    (org-startup-indented t)
    (org-blank-before-new-entry '((heading . nil)
                                 (plain-list-item . nil)))
    (org-return-follows-link nil)
    (org-support-shift-select t)
    (org-image-actual-width '(500))
    (org-list-allow-alphabetical t)
    (org-use-property-inheritance t)
    (org-use-sub-superscripts nil)
    (org-checkbox-hierarchical-statistics t)

    (org-export-with-toc nil)
    (org-export-with-section-numbers nil)
    (org-refile-use-outline-path t)
    (org-datetree-add-timestamp 1)
    (org-extend-today-until 6)
    (org-duration-format (quote h:mm))
    (org-outline-path-complete-in-steps nil)
    (org-hide-emphasis-markers t)
    (org-refile-targets '((nil :level . 2)))

    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-src-preserve-indentation t)
    (org-src-window-setup 'current-window)
    (org-edit-src-auto-save-idle-delay 60)

    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c c" . org-capture)
           (:map org-mode-map
                ("C-c C-M-e" . my-org-export-all)
                ("<return>" . org-return-indent)
                ("M-S-<delete>" . my/org-delete-heading-or-line)
                ("C-M-<left>" . org-backward-sentence)
                ("C-M-<right>" . org-forward-sentence)
                ("C-M-<end>" . org-sentence-newline)
                ("C-c l" . my/insert-link)))
    :delight org-indent-mode)

(use-package my-org
    :after org
    :straight (:local-repo "~/.config/emacs/my/org/"))
#+end_src

** special modes
#+begin_src emacs-lisp
(use-package vlf
    :commands (vlf-mode vlf)
    :init (require 'vlf-setup))

(use-package logview
    :commands logview-mode)
#+end_src

** passive modes
#+begin_src emacs-lisp
(use-package tree-sitter
  :init (global-tree-sitter-mode)
  :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
  :delight)
(use-package tree-sitter-langs
  :after tree-sitter)

(use-package whole-line-or-region
    :init (whole-line-or-region-global-mode 1)
    :delight whole-line-or-region-local-mode)

(use-package whitespace-cleanup-mode
    :hook prog-mode
    :delight whitespace-cleanup-mode)

(use-package editorconfig
    :init (editorconfig-mode 1)
    :delight editorconfig-mode)

(use-package hungry-delete
    :init (global-hungry-delete-mode)
    :delight hungry-delete-mode)
#+end_src

** editing
#+begin_src emacs-lisp
(use-package iedit
    :bind* ("C-r" . iedit-mode))

(use-package drag-stuff
    :init
    (drag-stuff-global-mode 1)
    :custom
    (drag-stuff-except-modes '(org-mode))
    :bind (:map drag-stuff-mode-map
                ("M-<up>" . drag-stuff-up)
                ("M-<down>" . drag-stuff-down))
    :delight drag-stuff-mode)

(use-package quickrun :commands quickrun)

(use-package expand-region
    :bind* (("C-M-w" . er/expand-region)
            ("C-M-q" . er/contract-region))
    :custom
    (expand-region-fast-keys-enabled nil)
    :config
    (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions))
#+end_src

*** formatting
#+begin_src emacs-lisp
;; Unified approach inc: https://github.com/purcell/reformatter.el/pull/24
(use-package apheleia
  :straight (:host github :repo "raxod502/apheleia")
  :init
  (apheleia-global-mode +1))
;; (use-package format-all
;;     :bind* ("C-f f" . format-all-buffer)
;;     :hook
;;     ((elixir-mode sh-mode css-mode js-mode web-mode scss-mode go-mode terraform-mode emacs-lisp-mode)
;;      . format-all-mode)
;;     :delight format-all-mode)
#+end_src

*** lsp
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp-deferred
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :init
  (cl-defun my/lsp-format-buf ((&optional (format t)) (&optional (organize-imports t)))
    (add-hook 'before-save-hook
              (lambda () (lsp-format-buffer) (lsp-organize-imports)) 0 t))
  :config
  (setq lsp-file-watch-ignored-directories (-union
                           lsp-file-watch-ignored-directories
                           '("[/\\\\]\\.mypy_cache$"
                             "[/\\\\]\\.pytest_cache$"
                             "[/\\\\]dot_git$")))
  :custom
  (lsp-enable-snippet t)
  (lsp-signature-doc-lines 1)
  (lsp-signature-auto-activate t)
  (lsp-progress-via-spinner nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-keymap-prefix "M-l")
  (lsp-disabled-clients '(ts angular-ls))
  :bind (:map lsp-mode-map
              ("M-." . lsp-goto-implementation)
              ("M--" . lsp-execute-code-action)))

(use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-sideline-enable t))
#+end_src

*** linting
#+begin_src emacs-lisp
(use-package flycheck
    :commands flycheck-mode)

(use-package flyspell
    :hook ((text-mode markdown-mode) . flyspell-mode)
    :config
    (advice-add 'make-flyspell-overlay :filter-return
                (lambda (overlay)
                  (overlay-put overlay 'help-echo nil)
                  (overlay-put overlay 'keymap nil)
                  (overlay-put overlay 'mouse-face nil)))
    :delight flyspell-mode)
(use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-wrapper)))
#+end_src

** minibuffer & completion
#+begin_src emacs-lisp
(use-package selectrum
    :after (orderless)
    :init (selectrum-mode +1)
    :config
    (prescient-persist-mode +1)
    (setq selectrum-preprocess-candidates-function
      #'selectrum-prescient--preprocess)
(add-hook 'selectrum-candidate-selected-hook
          #'selectrum-prescient--remember)
(add-hook 'selectrum-candidate-inserted-hook
          #'selectrum-prescient--remember)

    :custom
    (selectrum-refine-candidates-function #'orderless-filter)
    (orderless-skip-highlighting (lambda () selectrum-is-active))
    (selectrum-highlight-candidates-function #'orderless-highlight-matches)
    (magit-completing-read-function #'selectrum-completing-read)
    :bind (:map selectrum-minibuffer-map
                ("M-#" . selectrum-insert-current-candidate)
                ("M-ö" . my-util-backward-delete-sexp)))

(use-package orderless
    :custom
  (orderless-matching-styles '(orderless-prefixes)))

(use-package prescient)
(use-package selectrum-prescient
    :after prescient)

(use-package ctrlf
    :init (ctrlf-mode)
    :config
    (setq ctrlf-minibuffer-bindings (a-assoc ctrlf-minibuffer-bindings "M-ä" 'ctrlf-next-match "M-ü" 'ctrlf-previous-match))
    )

;; https ://www.reddit.com/r/emacs/comments/krptmz/emacs_completion_framework_embark_consult/
(use-package consult
    :after (projectile)
    :custom
    (consult-project-root-function #'projectile-project-root)
    :bind*
    ("C-M-y" . consult-yank)
    ("C-f" . consult-buffer)
    ("C-M-s" . consult-ripgrep)
    ("M-," . consult-global-mark))

(use-package marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-command-categories
        (a-merge marginalia-command-categories '((projectile-find-file . file)
                                                 (projectile-find-dir . file))))
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p
                                selectrum-mode) (selectrum-exhibit)))))

(use-package embark
    :config
  (setq embark-action-indicator
      (lambda (map _target)
        (which-key--show-keymap "Embark" map nil nil 'no-paging)
        #'which-key--hide-popup-ignore-command)
      embark-become-indicator embark-action-indicator)
    :bind*
  ("C-q" . embark-act))

(use-package embark-consult
  :after (embark consult))
#+end_src

*** crux
https://github.com/bbatsov/crux
#+begin_src emacs-lisp
(use-package crux
    :bind* (("C-c r" . crux-rename-file-and-buffer)
            ("C-c d" . crux-delete-file-and-buffer))
    :bind (
           ;; not global because conflict with org-mode new heading
           ("C-<return>" . crux-smart-open-line)
           ("M-<return>" . crux-smart-open-line-above))
    )
#+end_src

*** rainbow-mode
#+begin_src emacs-lisp
(use-package rainbow-mode
    :hook (css-mode org-mode help-mode)
    :delight rainbow-mode)
#+end_src

*** kurecolor
#+begin_src emacs-lisp
(use-package kurecolor :defer t)
#+end_src

*** Evil-Nerd-Commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys))
#+end_src

*** Outshine
#+begin_src emacs-lisp
(use-package outshine
    :commands outshine-mode)

(use-package navi-mode
    :commands navi-mode)
#+end_src

*** Company-Mode
#+begin_src emacs-lisp
(use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.3
          company-minimum-prefix-length 1
          company-tooltip-align-annotations t
          company-dabbrev-downcase nil
          company-echo-delay 0)
    :bind (:map company-active-map
                ("C-ä" . company-select-next)
                ("C-ü" . company-select-previous))
    :delight company-mode)
#+end_src

*** Centered-Window-Mode
#+begin_src emacs-lisp
(use-package
  centered-window
  :init (centered-window-mode 1)
  :custom (cwm-use-vertical-padding t)
  (cwm-frame-internal-border 0)
  (cwm-incremental-padding t)
  (cwm-incremental-padding-% 2)
  (cwm-left-fringe-ratio 0)
  (cwm-centered-window-width 130)
  :delight centered-window-mode)
#+end_src

*** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-backward-sexp)
                ("C-M-e" . sp-forward-sexp)
                ("C-S-<backspace>" . sp-backward-kill-sexp)
                ("C-M-<down>" . sp-select-next-thing))
    :init
    (defun my--enable-smartparents-modes ()
      (smartparens-mode 1)
      (show-smartparens-mode 1))
    :hook (prog-mode . my--enable-smartparents-modes)
    :config
    (require 'smartparens-config)
    :custom
    (blink-matching-paren nil)
    (sp-show-pair-delay 0.2)
    (sp-message-width nil)
    :delight smartparens-mode)
#+end_src

*** Undo-Tree
#+begin_src emacs-lisp
(use-package undo-tree
    :init
    (global-undo-tree-mode 1)
    :bind* (("C-p" . undo-tree-undo)
            ("M-p" . undo-tree-redo)
            ("C-M-p" . undo-tree-visualize))
    :delight undo-tree-mode)
#+end_src

*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+begin_src emacs-lisp
(setq ediff-keep-variants nil)
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally)
(add-hook 'ediff-prepare-buffer-hook 'show-all)
#+end_src

*** Ripgrep
#+begin_src emacs-lisp
(use-package wgrep :defer t)
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
    :init (projectile-mode 1)
    :config
      (defun my--projectile-ignore-project (project-root)
        (f-descendant-of? project-root (f-expand "straight" user-emacs-directory)))
    :custom
    (projectile-file-exists-remote-cache-expire nil)
    (projectile-completion-system 'default)
    (projectile-switch-project-action 'projectile-vc)
    (projectile-enable-caching t)
    (projectile-ignored-project-function #'my--projectile-ignore-project)

    :bind* (("C-M-r" . projectile-replace-regexp)
            ("C-c p" . projectile-command-map)
            ("C-M-f" . projectile-find-file)
            ("C-M-d" . projectile-find-dir)
            ("C-M-c" . projectile-switch-project)
            ("C-M-x" . projectile-switch-to-buffer))
    :delight)
#+end_src

*** which-key
[[https://github.com/justbur/emacs-which-key?utm_medium=referral&utm_campaign=ZEEF&utm_source=https%3A%2F%2Femacs.zeef.com%2Fehartc][@github.com]]
#+begin_src emacs-lisp
(use-package which-key
    :init (which-key-mode)
    :config
    (which-key-setup-minibuffer)
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay 10000)
    (which-key-idle-secondary-delay 0.05)
    :delight which-key-mode)
#+end_src

*** helpful
#+begin_src emacs-lisp
(use-package
  helpful
  :bind* (("C-h f" . helpful-callable)
          ("C-h v" . helpful-variable)
          ("C-h k" . helpful-key)
          ("C-h C-d" . helpful-at-point)
          ("C-h F" . helpful-function)
          ("C-h C" . helpful-command)))
#+end_src

*** dumb-jump
#+begin_src emacs-lisp
(use-package
  dumb-jump
  :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom (dumb-jump-prefer-searcher 'rg))
#+end_src

*** ix.io
#+begin_src emacs-lisp
(use-package
  ix
  :commands ix)
#+end_src

** hydra
#+begin_src emacs-lisp
(use-package hydra)
(use-package my-hydra
    :after hydra
    :straight (:local-repo "~/.config/emacs/my/hydra/")
    :bind* ("C-M-m" . hydra-my/init/body))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
    :commands magit-status
    :custom
    (magit-auto-revert-mode nil)
    (magit-diff-section-arguments (quote ("--no-ext-diff" "-U2")))
    (magit-diff-refine-ignore-whitespace nil)
    (magit-refs-margin '(t age magit-log-margin-width nil 18))
    (magit-diff-refine-hunk t)
    :bind*
    ("C-x b" . magit-blame)
    ("C-x l" . magit-log-buffer-file)
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-upstream
                            'magit-insert-unpulled-from-upstream))
#+end_src

** Dired
#+begin_src emacs-lisp
(require 'dired-x)
(use-package dired+
  :straight dired-plus
  :demand t
  :config
  (diredp-make-find-file-keys-reuse-dirs)
  :custom
  (dired-listing-switches "-aDhvl --group-directories-first")
  (dired-auto-revert-buffer t)
  :bind (("C-x d" . nil)
         :map dired-mode-map
         ("M-ö" . dired-up-directory)
         ("M-#" . dired-find-file)))

(use-package dired-filter
    :hook (dired-mode . dired-filter-mode)
    :custom
    (dired-filter-verbose nil)
    :delight dired-filter-mode)
#+end_src

* Languages
** Elixir
#+begin_src emacs-lisp
(use-package elixir-mode
    :mode "\\.ex\\'")

(use-package flycheck-credo
    :after elixir-mode
    :hook (elixir-mode . flycheck-mode)
    :config
    (flycheck-credo-setup)
    :custom
    (flycheck-elixir-credo-strict nil))
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
    :mode "\\.md\\'"
    :hook (markdown-mode . goto-address-mode))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode))

(use-package lsp-pyright
  :after python
  :hook (python-mode . lsp-deferred))
#+end_src

** webdev
#+begin_src emacs-lisp
(use-package css-mode
    :mode ("\\.less\\'" "\\.css\\'" "\\.sass\\'" "\\.scss\\'")
    :custom
    (css-indent-offset 4))

(use-package js2-mode
    :mode "\\.js\\'"
    :custom
    (js2-basic-offset 2)
    (js2-strict-inconsistent-return-warning nil))

(use-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'" "\\.tsx\\'")
    :custom
    (web-mode-enable-auto-closing t)
    (web-mode-enable-auto-indentation nil))

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . (lambda ()
                                (lsp-deferred)
                                (my/lsp-format-buf)))
    :config (setq lsp-eslint-server-command
                  '("node"
                    (expand-file-name"~/.local/vscode-eslint/extension/server/out/eslintServer.js")
                    "--stdio")))
#+end_src

** json
#+begin_src emacs-lisp
(use-package json-mode
    :mode "\\.json\\'"
    :custom
    (json-reformat:indent-width 2)
    (js-indent-level 2))
#+end_src

** jsonnet
#+begin_src emacs-lisp
(use-package jsonnet-mode
    :mode  ("\\.jsonnet\\'" "\\.libsonnet\\'"))
#+end_src

** elisp
#+begin_src emacs-lisp
(use-package
    nameless
    :hook (emacs-lisp-mode . nameless-mode)
    :custom (nameless-private-prefix t))

(use-package
    lispy
    :hook (emacs-lisp-mode . lispy-mode))

(use-package xtest :defer t)
#+end_src

** php
#+begin_src emacs-lisp
(use-package php-mode
    :mode "\\.php\\'")
#+end_src

** rust
#+begin_src emacs-lisp
(use-package rustic
  :after smartparens-rust
  :mode "\\.rs\\'")
#+end_src

** golang
#+begin_src emacs-lisp
(use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . lsp-deferred))
#+end_src

** nim
#+begin_src emacs-lisp
(use-package nim-mode
    :mode "\\.nim\\'"
    :hook ((nim-mode . nimsuggest-mode)))
#+end_src

** terraform
#+begin_src emacs-lisp
(use-package terraform-mode
    :mode "\\.tf\\'")
#+end_src

** graphql
#+begin_src emacs-lisp
(use-package graphql-mode
    :mode ("\\.gql\\'" "\\.graphql\\'"))
#+end_src

** lua
#+begin_src emacs-lisp
(use-package lua-mode
    :mode ("\\.lua\\'"))
#+end_src

** latex
 #+begin_src emacs-lisp
(use-package tex-mode
    :straight auctex
    :mode "\\.tex\\'"
    :hook (LaTeX-mode . turn-on-reftex))
 #+end_src

** plantuml
 #+begin_src emacs-lisp
(use-package
    plantuml-mode
    :mode "\\.puml\\'"
    :custom
    (plantuml-executable-path "/usr/bin/plantuml")
    (plantuml-default-exec-mode 'executable))
 #+end_src

** adoc
 #+begin_src emacs-lisp
(use-package adoc-mode
    :mode "\\.adoc\\'")
 #+end_src

** yaml
#+begin_src emacs-lisp
(use-package yaml-mode
    :mode ("\\.yml.*\\'" "\\.yaml.*\\'"))
#+end_src

** sql
#+begin_src emacs-lisp
(use-package sql-indent
    :mode "\\.sql\\'")
#+end_src

** mu4e
#+begin_src emacs-lisp
(use-package mu4e
    :hook (mu4e-compose-pre . my-mu4e-set-account)
    :straight (:local-repo "/usr/share/emacs/site-lisp/mu4e")
    :commands mu4e
    :custom
    (starttls-use-gnutls t)
    (starttls-gnutls-program "gnutls-cli")
    (starttls-extra-arguments nil)

    (send-mail-function 'smtpmail-send-it)
    (message-send-mail-function 'smtpmail-send-it)
    (mu4e-get-mail-command "offlineimap")
    (mu4e-maildir       "~/mail")
    (mu4e-sent-folder   "/sent")
    (mu4e-drafts-folder "/drafts")
    (mu4e-trash-folder  "/trash")
    (mu4e-refile-folder "/archive")
    (mu4e-attachment-dir "~/downloads")
    (mu4e-sent-messages-behavior 'delete))

(use-package mu4e-overview
  :after mu4e)

(use-package my-mu4e
  :after mu4e
  :straight (:local-repo "~/.config/emacs/my/mu4e/"))

(use-package mu4e-alert
    :after mu4e
    :hook (message-send . mml-secure-message-sign-pgpmime)
    :init
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display)
    :config
    (mu4e-alert-set-default-style 'libnotify))
#+end_src

** Tramp
#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src

* tools
#+begin_src emacs-lisp
(use-package x509-mode :defer t)

(use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :commands restclient-mode)

(use-package realgud :defer t)

(use-package ledger-mode
    :mode "\\.ledger\\'")

(use-package google-translate
  :config
  ;; https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  :custom
  (google-translate-translation-directions-alist '(("de" . "en"))))
#+end_src

* UI
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(mouse-avoidance-mode)
(scroll-bar-mode -1)
(column-number-mode 1)
(set-face-attribute 'default nil :family "Monospace" :height 110)
(setq-default cursor-type 'bar)

(use-package modus-themes
    :demand t
    :custom
    (modus-themes-completions 'moderate)
    (modus-themes-region 'bg-only-no-extend)
    (modus-themes-org-blocks 'greyscale)
    :init
    (modus-themes-load-themes)
    (defun my-modus-themes-custom-faces ()
      (modus-themes-with-colors
        (custom-set-faces
         `(sp-show-pair-match-face ((,class :foreground ,green-nuanced-fg
                                            :background nil
                                            :weight ,'bold))))))
    (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)
    :config
    (modus-themes-load-operandi))
#+end_src

* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* meta
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emac2s]]
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)
** my-own-tips
C-c C-o save search results
reset var: `(setq foo (eval (car (get 'foo 'standard-value))))`
(setq require-final-newline nil)
