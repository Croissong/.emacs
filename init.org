; -*- eval: (org-init-mode); -*-
* Initialize
** Initialize straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Coding Environment
[[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][@masteringemacs]]
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (prefer-coding-system 'utf-8-unix)
    (setq buffer-file-coding-system 'utf-8-unix
          default-file-name-coding-system 'utf-8-unix
          utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
          locale-coding-system 'utf-8-unix)
    (set-terminal-coding-system 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8-unix)
    (set-language-environment 'utf-8)
    (set-default-coding-systems 'utf-8-unix)
    (unless (eq system-type 'windows-nt)
      (set-selection-coding-system 'utf-8-unix)))
#+END_SRC
** Bootstrap use-package
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(require 'bind-key)
(use-package delight)
#+END_SRC
** my/org-init
#+BEGIN_SRC emacs-lisp
(use-package org-init
    :after org
    :straight nil
    :commands (org-init-mode org-init-open)
    :load-path "els/org-init/")
#+END_SRC
** My/Utils
#+BEGIN_SRC emacs-lisp
(use-package my-util
    :straight nil
    :functions my-util-ensureEmacsDir my-util-cb? my-util-win? my-util-linux?
    :load-path "els/my-utils/")
#+END_SRC
* Keybindings
** Moving
*** Between Windows
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-ö"  . windmove-left)
 ("C-#" . windmove-right)
 ("C-ü" . windmove-up)
 ("C-ä" . windmove-down)
 ("C-Ü" . clone-indirect-buffer))
#+END_SRC
*** around
#+BEGIN_SRC emacs-lisp
(bind-keys
 ("M-ö"  . left-char)
 ("M-#" . right-char)
 ("M-ü" . previous-line)
 ("M-ä" . next-line))
#+END_SRC
** delete other window
#+BEGIN_SRC emacs-lisp
(defun delete-other-window ()
  (interactive)
  (delete-window (other-window 1)))

(bind-key "C-x q" 'delete-other-window)
#+END_SRC
** disable overwrite
#+BEGIN_SRC emacs-lisp
(bind-key "<insert>" nil)
#+END_SRC
** search M-s
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("M-s r" . replace-string)
 ("M-s q" . query-replace))
#+END_SRC
** revert buffer
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("M-r" . revert-buffer))
#+END_SRC
** hm
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-M-k" . kill-this-buffer)
 ("C-l" . goto-line)
 ("M-_" . shell-command))
#+END_SRC
* Functions
** Line manouevor functions
*** Copy-line-or-Region
#+BEGIN_SRC emacs-lisp
(defun xah-copy-line-or-region ()
  "Copy current line, or text selection.
When `universal-argument' is called first, copy whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-end-position)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-ring-save p1 p2)))

(bind-key "M-w" 'xah-copy-line-or-region)
#+END_SRC
*** Smart delete
#+BEGIN_SRC emacs-lisp
(defun my/delete-whitespace-or-word ()
  (interactive)
  (if (looking-at "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (kill-word 1)))

(defun my/backward-delete-whitespace-or-word ()
  (interactive)
  (if (looking-back "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (backward-kill-word 1)))

(bind-key "C-<backspace>" 'my/backward-delete-whitespace-or-word)
(bind-key "C-M-<backspace>" 'my/delete-whitespace-or-word)

(bind-key "C-a" 'back-to-indentation)
#+END_SRC
** Not in use
*** switch to previous buffer
[[http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/][emacsredux.com]]
#+BEGIN_SRC emacs-lisp
(defun my/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
*** Useless?
#+BEGIN_SRC emacs-lisp
(defun find-file-right()
  (interactive)
  (split-window-right)
  (ido-find-file-other-window))

(defvar xah-switch-buffer-ignore-dired t)
(defun xah-previous-user-buffer ()
  "Switch to the previous user buffer.
 `user buffer' is a buffer whose name does not start with `*'.
If `xah-switch-buffer-ignore-dired' is true, also skip directory buffer.
2015-01-05 URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'"
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (or
           (string-equal "*" (substring (buffer-name) 0 1))
           (if (string-equal major-mode "dired-mode")
               xah-switch-buffer-ignore-dired
             nil
             ))
          (progn (previous-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))


(defun xah-next-user-buffer ()
 "Switch to the next user buffer.
 `user buffer' is a buffer whose name does not start with `*'.
If `xah-switch-buffer-ignore-dired' is true, also skip directory buffer.
2015-01-05 URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'"
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (or
           (string-equal "*" (substring (buffer-name) 0 1))
           (if (string-equal major-mode "dired-mode")
               xah-switch-buffer-ignore-dired
             nil
             ))
          (progn (next-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))
#+END_SRC
** Misc
*** Capitalize Word
#+BEGIN_SRC emacs-lisp
(defun my/capitalize-previous-word()
  (interactive)
  (capitalize-word -1))
#+END_SRC
** b64encode-no-break
#+BEGIN_SRC emacs-lisp
(defun my/base64-encode-region-no-break ()
  (interactive)
  (base64-encode-region (mark) (point) t))
#+END_SRC
* Generic
** Read env vars
 #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-arguments '("-i")
          exec-path-from-shell-variables '("DISPLAY" "XAUTHORITY"))
    )
 #+END_SRC
** My Values
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/"
      custom-file (expand-file-name "custom.el" user-emacs-directory))
(defvar gdrive-dir (concat default-directory "cloud/"))
(my-util-ensureEmacsDir "config/")
(setq browse-url-generic-program (executable-find (getenv "BROWSER"))
      browse-url-browser-function 'browse-url-generic)
;; TODO
(setq-default indent-tabs-mode nil
              tab-width 2
              indent-line-function 'insert-tab
              sentence-end-double-space nil)
(setq require-final-newline t
      enable-local-eval t)
#+END_SRC
*** Backup
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+BEGIN_SRC emacs-lisp
(my-util-ensureEmacsDir "save/backup")
(setq delete-old-versions t
  kept-new-versions 6
  create-lockfiles nil
  kept-old-versions 2
  version-control t
  backup-directory-alist '((".*" . "~/.emacs.d/save/backup/")))
#+END_SRC
*** Autosave
#+BEGIN_SRC emacs-lisp
(my-util-ensureEmacsDir "save/autosave")
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** Start-Up
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq-default major-mode 'indented-text-mode)
#+END_SRC
** littlest things
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
(setq ring-bell-function 'ignore
      vc-follow-symlinks t)
;; http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3
#+END_SRC
*** Kill active process buffer no prompt
#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC
** async shell buffer
#+BEGIN_SRC emacs-lisp
(setq display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))
#+END_SRC
** mini
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq same-window-buffer-names '("*Help*"))
#+END_SRC
** eldoc
#+BEGIN_SRC emacs-lisp
(delight 'eldoc-mode)
#+END_SRC
* Packages
** Style
*** Adaptive-Wrap
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
    :init
    (define-globalized-minor-mode adaptive-wrap-global-mode
        adaptive-wrap-prefix-mode
      adaptive-wrap-prefix-mode)
    (adaptive-wrap-global-mode)
    )
#+END_SRC
*** Window
**** Purpose-mode
[[https://github.com/bmag/emacs-purpose][@github]]
#+BEGIN_SRC emacs-lisp
(use-package window-purpose
    :commands purpose-mode
    :config
  (add-to-list 'purpose-user-mode-purposes '(rust-mode . rust))
  (add-to-list 'purpose-user-mode-purposes '(cargo-process-mode . cargo-process))
  (purpose-compile-user-configuration)
  )
#+END_SRC
** View large files
#+BEGIN_SRC emacs-lisp
(use-package vlf
    :commands (vlf-mode vlf)
    :init
    (require 'vlf-setup)
    )
#+END_SRC
** Minor Modes
*** Drag-stuff
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
    :init
    (drag-stuff-global-mode)
    :config
    (add-to-list 'drag-stuff-except-modes 'org-mode)
    :bind (:map drag-stuff-mode-map
                ("M-<up>" . drag-stuff-up)
                ("M-<down>" . drag-stuff-down))
    :delight drag-stuff-mode
    )
#+END_SRC
*** whitespace-cleanup-mode
[[https://github.com/purcell/whitespace-cleanup-mode][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
    :init (global-whitespace-cleanup-mode)
    :delight whitespace-cleanup-mode
    )
#+END_SRC
*** format-all
[[https://github.com/purcell/whitespace-cleanup-mode][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package format-all
    :bind* ("C-f f" . format-all-buffer)
    :hook
    ((elixir-mode sh-mode css-mode js-mode web-mode scss-mode go-mode rust-mode)
     . format-all-mode)
    :delight format-all-mode
    )
#+END_SRC
*** Buffer-move
https://github.com/lukhas/buffer-move
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
    :init
    (bind-key* "C-M-Ö" (lambda () (interactive) (insert "ö")))
    (bind-key* "C-M-Ä" (lambda () (interactive) (insert "ä")))
    (bind-key* "C-M-'" (lambda () (interactive) (insert "#")))
    :bind*
    ("C-M-#" . buf-move-right)
    ("C-M-ö" . buf-move-left)
    ("C-M-ü" . buf-move-up)
    ("C-M-ä" . buf-move-down)
    )
#+END_SRC
*** crux
https://github.com/bbatsov/crux
#+BEGIN_SRC emacs-lisp
(use-package crux
    :config
    (defun my/kill-line-or-region ()
      (interactive)
      (if (use-region-p)
          (kill-region (region-beginning) (region-end))
        (crux-smart-kill-line)))

    :bind* (("C-f r" . crux-rename-file-and-buffer)
            ("C-f d" . crux-delete-file-and-buffer)
            ("C-w" . my/kill-line-or-region))
    :bind (
           ;; not global because conflict with org-mode new heading
           ("C-<return>" . crux-smart-open-line)
           ("M-<return>" . crux-smart-open-line-above))
    )
#+END_SRC
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
    :hook (css-mode org-mode help-mode)
    :delight rainbow-mode)
#+END_SRC
*** Evil-Nerd-Commenter
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys)
    )
#+END_SRC
*** Outshine
#+BEGIN_SRC emacs-lisp
(use-package outshine
    :commands outshine-mode
    )
(use-package navi-mode
    :commands navi-mode)
#+END_SRC
*** Company-Mode
#+BEGIN_SRC emacs-lisp
(use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.3
          company-minimum-prefix-length 1
          company-tooltip-align-annotations t
          company-dabbrev-downcase nil
          company-echo-delay 0)
    :bind (:map company-active-map
                ("C-ä" . company-select-next)
                ("C-ü" . company-select-previous))
    :delight company-mode
    )
#+END_SRC
*** Centered-Window-Mode
#+BEGIN_SRC emacs-lisp
(use-package centered-window
    :init
    (centered-window-mode t)
    :config
    (setq cwm-use-vertical-padding t
                cwm-frame-internal-border 0
                cwm-incremental-padding t
                cwm-incremental-padding-% 2
                cwm-left-fringe-ratio 0
                cwm-centered-window-width 130)
    :delight centered-window-mode
    )
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-backward-sexp)
                ("C-M-e" . sp-forward-sexp)
                ("C-S-<backspace>" . sp-backward-kill-sexp)
                ("C-M-<down>" . sp-select-next-thing))
    :init
    (smartparens-global-mode t)
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode t)
    (setq blink-matching-paren nil)
    :delight smartparens-mode
    )
#+END_SRC
*** Undo-Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
    :init
    (global-undo-tree-mode t)
    :bind* (("C-p" . undo-tree-undo)
            ("M-p" . undo-tree-redo)
            ("C-M-p" . undo-tree-visualize))
    :delight undo-tree-mode
    )
#+END_SRC
*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+BEGIN_SRC emacs-lisp
;; (setq diff-command "ediff")
;; (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(ediff-split-window-function 'split-window-horizontally)
 )
#+END_SRC
**** Org-mode fix
#+BEGIN_SRC emacs-lisp
;; diff hooks for org mode
(add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
(add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide(buf command &rest cmdargs)
  "If buffer exists and is orgmode then execute command"
  (if buf
      (if (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
    (with-current-buffer (apply command cmdargs)))
    )
  )

(defun f-ediff-org-unfold-tree-element ()
  "Unfold tree at diff location"
  (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-C 'org-reveal)
  )
;;
(defun f-ediff-org-fold-tree ()
  "Fold tree back to top level"
  (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)
  )
#+END_SRC
*** Expand-Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :bind* (("C-M-w" . er/expand-region)
            ("C-M-q" . er/contract-region))
    :config
    (setq expand-region-fast-keys-enabled nil)
    (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions)
    )
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :init
    ;; (add-hook 'after-init-hook #'global-flycheck-mode) ;
    :config
    (setq flycheck-idle-change-delay 2)
    ;; disable jshint since we prefer eslint checking
    ;; (setq-default flycheck-disabled-checkers
    ;;  (append flycheck-disabled-checkers
    ;;    '(javascript-jshint)))

    ;; use eslint with web-mode for jsx files
    ;; (flycheck-add-mode 'javascript-eslint 'web-mode)

    ;;https://github.com/justjake/eslint-project-relative
    ;; (when (my-util-installed? "eslint-project-relative")
    ;; (setq flycheck-javascript-eslint-executable "eslint-project-relative"))
    ;; customize flycheck temp file prefix
    ;; (setq-default flycheck-temp-prefix ".flycheck")
    :delight flycheck-mode
    )
#+END_SRC
**** disable in org-src-block
#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook
    (lambda () (setq-local
          flycheck-disabled-checkers
          '(emacs-lisp-checkdoc))))
#+END_SRC
*** Ripgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep)
(use-package rg)
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package flx)
(use-package avy)
(use-package smex)

(use-package ivy-hydra
    :after (ivy hydra))

(use-package counsel
    :after ivy
    :delight counsel-mode
    :config
    (counsel-mode))

(use-package ivy
    :after (flx avy smex)
    :init
    (ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "

          ;; fuzzy matching for counsel-M-x
          ivy-re-builders-alist
          '((counsel-M-x . ivy--regex-fuzzy)
            (counsel-describe-function . ivy--regex-fuzzy)
            (counsel-describe-variable . ivy--regex-fuzzy)
            (t . ivy--regex-plus))

          ;; no ^ for the fuzzy matching cmds
          ivy-initial-inputs-alist
          '((counsel-package . "^+ ")
            (org-refile . "^")
            (org-agenda-refile . "^")
            (org-capture-refile . "^")
            (counsel-M-x . "")
            (counsel-describe-function . "")
            (counsel-describe-variable . "")
            (counsel-org-capture . "^")
            (Man-completion-table . "^")
            (woman . "^"))

          ivy-extra-directories '("./")
          magit-completing-read-function 'ivy-completing-read
          counsel-rg-base-command (format "rg --no-heading -S --line-number --color never --ignore-file %s/.config/ripgrep/ignore %%s ." (substitute-in-file-name "$HOME"))
          counsel-grep-base-command counsel-rg-base-command)


    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-s" . counsel-grep-or-swiper)
           :map ivy-minibuffer-map
           ("M-ö" . counsel-up-directory)
           ("M-#" . ivy-alt-done)
           ("C-r" . ivy-previous-line-or-history)
           ("M-ä" . ivy-next-line)
           ("C-x C-s" . ivy-occur)
           ("M-ü" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :delight ivy-mode
    )

(use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1))


(use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))

(use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode)
    (setq projectile-completion-system 'ivy
          counsel-projectile-switch-project-action 'magit-status)
    :bind* (("C-M-f" . counsel-projectile-find-file)
            ("C-M-d" . counsel-projectile-find-dir)
            ("C-M-x" . counsel-projectile-switch-to-buffer)
            ("C-M-s" . counsel-projectile-rg))
    )
#+END_SRC
*** Space-line
[[https://github.com/TheBB/spaceline/tree/master/][The Spacemacs Modeline @github]]
#+BEGIN_SRC emacs-lisp
(use-package spaceline
    :init
    (require 'spaceline-config)
    :config
    (spaceline-toggle-buffer-size-off)
    )
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
    :init (projectile-mode)
    :config
    (setq projectile-file-exists-remote-cache-expire nil
          projectile-switch-project-action 'magit-status
          projectile-enable-caching t)
    :bind* (("C-M-r" . projectile-replace-regexp)
            ("C-c p" . projectile-command-map))
    :delight projectile-mode
    )
#+END_SRC
*** which-key
[[https://github.com/justbur/emacs-which-key?utm_medium=referral&utm_campaign=ZEEF&utm_source=https%3A%2F%2Femacs.zeef.com%2Fehartc][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :init (which-key-mode)
    :delight which-key-mode
    )
#+END_SRC
*** dumb-jump
[[https://github.com/jacktasia/dumb-jump][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :config
    (setq dumb-jump-prefer-searcher 'rg
          dumb-jump-selector 'ivy)
    :bind ("M-." . dumb-jump-go)
    )
#+END_SRC
*** flymake
#+BEGIN_SRC emacs-lisp
(remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
#+END_SRC
** Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
    :init (editorconfig-mode 1)
    :delight editorconfig-mode
    )
#+END_SRC
** logview
#+BEGIN_SRC emacs-lisp
(use-package logview
    :commands logview-mode)
#+END_SRC
** emamux
#+BEGIN_SRC emacs-lisp
(use-package emamux
    :config (setq emamux:show-buffers-with-index nil
                  emamux:get-buffers-regexp  "^\\(buffer[0-9]+\\): +\\([0-9]+\\) +\\(bytes\\): +[\"]\\(.*\\)[\"]")
    )
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
(use-package my-hydra
    :after hydra
    :straight nil
    :load-path "els/my-hydra/"
    :bind* ("C-." . hydra-my/init/body)
)
#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :commands lsp)
#+END_SRC
** realgud
#+BEGIN_SRC emacs-lisp
;; M-x load-library realgud
(use-package realgud
    :straight (:host github :repo "realgud/realgud" :no-autoloads t)
    :defer t)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :init
    (setq magit-auto-revert-mode nil)
    :config
    (setq magit-diff-arguments (quote ("--no-ext-diff" "--stat"))
          magit-diff-section-arguments (quote ("--no-ext-diff" "-U2"))
          magit-diff-refine-ignore-whitespace nil
          magit-diff-refine-hunk t)
     (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-modules-unpulled-from-upstream
                          'magit-insert-unpulled-from-upstream)
     (magit-add-section-hook 'magit-status-sections-hook
                             'magit-insert-modules-unpushed-to-upstream
                             'magit-insert-unpulled-from-upstream)
    )

(use-package forge
  :after magit
  :straight (:host github :repo "magit/forge"))
#+END_SRC
*** ssh
**** windows
[[https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package ssh-agency
  :if (my-util-win?)
  :init
  (setenv "SSH_ASKPASS" "git-gui--askpass")
  )
#+END_SRC
** Org-Mode
#+BEGIN_SRC emacs-lisp
(require 'subr-x)
(straight-use-package 'git)

(defun org-git-version ()
  "The Git version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))

(defun org-release ()
  "The release version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))

(provide 'org-version)

(use-package org
    :straight org-plus-contrib
    :mode ("\\.org\\'" . org-mode)
    :config
    (require 'org-checklist)
    (org-indent-mode)
    (setq org-startup-indented t
          org-blank-before-new-entry '((heading . nil)
                                       (plain-list-item . nil))
          org-return-follows-link nil
          org-support-shift-select t
          org-image-actual-width '(500)
          org-list-allow-alphabetical t
          org-use-property-inheritance t
          org-use-sub-superscripts nil
          org-checkbox-hierarchical-statistics t)

    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb))
    :delight org-indent-mode)

(use-package my-org
    :after org-mode
    :straight nil
    :bind (:map org-mode-map
                ("C-c C-M-e" . my-org-export-all)
                ("M-c" . my/capitalize-previous-word))
    :load-path "els/my-org/")
#+END_SRC
*** Config
**** Export
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil
      org-export-with-section-numbers nil)
#+END_SRC
**** Capture
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t
      org-datetree-add-timestamp 1
      org-extend-today-until 6
      org-outline-path-complete-in-steps nil
      org-hide-emphasis-markers t
      org-time-stamp-custom-formats '("<%e. %B '%y>" . "<%b %e, %Y %H:%M>")
      org-refile-targets '((nil :level . 2)))
(setq-default org-display-custom-times t)
(bind-key "C-c c" 'org-capture)
#+END_SRC
***** Functions
****** My/insert-link
#+BEGIN_SRC emacs-lisp
;; TODO change minibuffer prompt while read-from-minibuffer to display Url: or File: in minibuffer prompt depending on what is inserted
;; TODO maybe change stevinho.justnetwork.eu from @justnetwork.eu to @stevinho.eu
;; replace www. and use first and last (idea)
(defun my/insert-link ()
  (interactive)
  (let* ((keymap (copy-keymap minibuffer-local-map))
   (get-stored-link
    '(lambda ()
       (setq url (caar org-stored-links))
      (if url
    (concat "::" (car (last (split-string (nth 1 (split-string url "[\\:]")) "[\\/]"))))
        nil)))
   (get-url-link
    '(lambda ()
       (setq url (org-get-x-clipboard 'CLIPBOARD))
       (if (string= (substring url 0 4) "http")
     (let* ((urlParts
       (last (split-string (nth 2 (split-string url "[\\/]")) "[\\.]") 2)))
       (concat "@" (nth 0 urlParts) "." (nth 1 urlParts)))
         nil
         )))
   url urlDescription)

    (define-key keymap (kbd "<tab>")
      (lambda () (interactive)
  (let (link message)
    (if (string= "@" (substring (minibuffer-contents) 0 1))
        (setq link (funcall get-stored-link)
        message "No link stored")
      (setq link (funcall get-url-link)
      message "No Url in Clipboard"))
    (if link (progn
         (delete-minibuffer-contents)
         (insert link))
      (minibuffer-message message))
    )))

    (define-key keymap (kbd "C-g")
      (lambda () (interactive)
  (delete-minibuffer-contents)
  (exit-minibuffer)
  ))
    (setq urlDescription
    (or (funcall get-url-link) (funcall get-stored-link)))

    (if urlDescription
  (progn
    (setq urlDescription (read-from-minibuffer "Link" urlDescription keymap))
    (if (string= "" urlDescription)
        (minibuffer-message "Aborted")
      (insert (format "[[%s][%s]]" url urlDescription))))
      (minibuffer-message "No Link to insert. Aborted"))
    ))
#+END_SRC
**** Babel
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (setq org-babel-sh-command "C:/cygwin64/bin/bash.exe"))

(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-pretty-entities t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window
      org-edit-src-auto-save-idle-delay 60)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (python . t)
   (gnuplot . t)
   (shell . t)
   (sql . t)))
#+END_SRC

#+RESULTS:

**** Passwords
#+BEGIN_SRC emacs-lisp
(use-package pass
    :config )
#+END_SRC
**** Encryption
#+BEGIN_SRC  emacs-lisp
(setenv "GPG_AGENT_INFO" nil)
(require 'epa-file)
(setq epa-file-select-keys nil)
#+END_SRC
**** Latex
#+BEGIN_SRC emacs-lisp
;;(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-preview-ltxpng-directory (concat temporary-file-directory "ltxpng/"))
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
(defun org-sentence-newline()
  (interactive)
  (org-backward-sentence)
  (org-delete-backward-char 1)
  (org-return-indent))
(defun my/org-delete-heading-or-line ()
  (interactive)
  (if (org-at-heading-p)
      (org-cut-subtree)
    (kill-line)))
#+END_SRC
**** [disabled]
:PROPERTIES:
:header-args: :tangle no
:END:
***** Checkboxes toggle DONE State (not working)
[[http://osdir.com/ml/emacs-orgmode-gnu/2010-05/msg00506.html][mailinglist]]
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo-checkbox (c-on c-off)
  "Switch entry to DONE when all subentry-checkboxes are done, to TODO otherwise."
  (outline-previous-visible-heading 1)
  (let (org-log-done org-log-states)	; turn off logging
    (org-todo (if (= c-off 0) "DONE" "TODO"))))
(add-hook 'org-checkbox-statistics-hook 'org-summary-todo-checkbox)
#+END_SRC
***** Insert Image
#+BEGIN_SRC emacs-lisp
(defun org-insert-image (url name)
"Take a screenshot into a time stamped unique-named file in the
sub-directory (%filenameIMG) as the org-buffer and insert a link to this file."
(interactive "sEnter url: \nsEnter file name: ")

(setq foldername (concat user-emacs-directory "meinAll/media/" (file-name-base buffer-file-name) "/"))
(if (not (file-exists-p foldername))
  (mkdir foldername))

(setq imgName (concat
         (format "%s." name) (nth 0 (last(split-string url "\\.")))))
(setq imgPath (concat foldername imgName))

(url-copy-file url imgPath)

(setq width (let
    ((w (car (image-size (create-image imgPath) :pixel))))
        (if (> w 500) 500 w)))

(insert (format "#+ATTR_HTML: :width %dpx" width))
(newline-and-indent)
(insert (concat "[[" imgPath "]]"))
(newline-and-indent)
(insert (concat ":PROPERTIES:"))
(newline-and-indent)
(insert (concat ":Quelle: [[" url "][Quelle]]"))
(newline-and-indent)
(insert (concat ":END:"))
(org-display-inline-images nil t))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(bind-keys :map org-mode-map
("<return>" . org-return-indent)
("M-S-<delete>" . my/org-delete-heading-or-line)
("C-M-<left>" . org-backward-sentence)
("C-M-<right>" . org-forward-sentence)
("C-M-<end>" . org-sentence-newline)
("C-c l" . my/insert-link))
#+END_SRC
**** chromebook
#+BEGIN_SRC emacs-lisp
(when (my-util-cb?)
    (bind-keys :map org-mode-map
         ("M-S-<prior>" . org-shiftmetaup)
         ("M-S-<next>" . org-shiftmetadown)
         ;; ("M-right" . drag-stuff-right)
         ;; ("M-right" . drag-stuff-left)
         ))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :demand t
  :config
  (diredp-make-find-file-keys-reuse-dirs)
  (setq dired-listing-switches "-aDhvl --group-directories-first"
        dired-auto-revert-buffer t)
  :bind (("C-x d" . nil)
         :map dired-mode-map
         ("?" . my/dired-get-size)
         ("M-ö" . dired-up-directory)
         ("M-#" . dired-find-file)))

(use-package dired-filter
    :hook (dired-mode . dired-filter-mode))
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
(defun my/dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
               (progn
                 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
     (match-string 1))))))
#+END_SRC
** Languages
*** Elixir
**** Elixir Mode
https://github.com/elixir-lang/emacs-elixir
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
    :mode "\\.ex\\'"
    )
#+END_SRC
**** Alchemist
https://github.com/tonini/alchemist.el
#+BEGIN_SRC emacs-lisp
(use-package alchemist
    :delight alchemist-mode
    :hook (elixir-mode . alchemist-mode)
    :bind (:map alchemist-mode-map
                ("C-c C-c" . alchemist-iex-compile-this-buffer)
                ("C-c a s" . my/phoenix-start))
    :config
    (defun my/phoenix-start ()
      (interactive)
      (if (alchemist-project-p)
          (let ((default-directory (alchemist-project-root)))
            (pop-to-buffer
             (process-buffer
              (or (if (buffer-live-p alchemist-iex-buffer)
                      (get-buffer-process alchemist-iex-buffer))
                  (progn
                    (alchemist-iex-start-process '("iex" "-S" "mix" "phx.server"))
                    (alchemist-iex-process))))
             ))))
    )
#+END_SRC
**** flycheck-credo
#+BEGIN_SRC emacs-lisp
(use-package flycheck-credo
    :after elixir-mode
    :hook (elixir-mode . flycheck-mode)
    :config
    (flycheck-credo-setup)
    (setq flycheck-elixir-credo-strict nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
    :mode "\\.md\\'"
    )
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :config
  (elpy-enable)

  (defun my/jump-to-test ()
    (interactive)

    (let* ((file-name
            (nth 0 (last (split-string buffer-file-name "[\\/]"))))
           (test-file
            (s-join "/" (append (butlast (split-string buffer-file-name "[\\/]"))
                                (list (concat "test_" file-name)))))
           (func-name "")
           (func-args (progn
                        (unless (looking-at "def")
                          (python-nav-beginning-of-defun))
                        (right-word)
                        (right-char)
                        (set-mark (point))
                        (while (not (looking-at "("))
                          (sp-forward-sexp))
                        (setq func-name (buffer-substring-no-properties (mark) (point)))
                        (set-mark (point))
                        (sp-forward-sexp)
                        (buffer-substring-no-properties (mark) (point)))))
      (with-current-buffer (find-file test-file)
        (goto-char (point-min))
        (unless (search-forward-regexp "from .+ import \\*" nil t)
          (insert (concat "from "
                          (replace-regexp-in-string "\\.py" "" "calc.py")
                          " import *\n")))
        (let ((test-func (concat "test_" func-name)))
          (unless (search-forward test-func nil t)
            (goto-char (point-max))
            (insert "\n"
                    (format "def %s():\n" test-func)
                    (format "\tassert %s%s == " func-name func-args))))
        )))
  )
#+END_SRC
**** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy :after python)
#+END_SRC
*** Web
**** HTML/CSS
***** css
#+BEGIN_SRC emacs-lisp
(use-package css-mode
    :mode ("\\.less\\'" "\\.css\\'" "\\.sass\\'" "\\.scss\\'")
    :config
    (setq css-indent-offset 4)
    )
#+END_SRC
**** JS
***** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
    :mode "\\.js\\'"
    :config
    (setq js2-basic-offset 2
          js2-strict-inconsistent-return-warning nil)
    )
#+END_SRC
***** Web-mode
[[http://web-mode.org/][@web-mode.org]]
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'")
    :config
    (require  'company-web-html)
    (setq web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-attr-indent-offset 2
          web-mode-attr-value-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-style-padding 2
          web-mode-script-padding 0
          web-mode-block-padding 0
          web-mode-enable-control-block-indentation nil
          web-mode-enable-auto-closing t
          web-mode-content-types-alist
          '(("css" . "\\.\\(s?css\\|css\\.erb\\)\\'")
            ("jsx" . "\\.\\([jt]s\\|[jt]s\\.erb\\)\\'")
            ("json" . "\\.\\(api\\|json\\|jsonld\\)\\'")
            ("jsx" . "\\.[jt]sx\\'")
            ("xml" . "\\.xml\\'")
            ("html" . ".")))
    )
#+END_SRC
***** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
    :mode "\\.json\\'"
    :config
    (setq json-reformat:indent-width 2
          js-indent-level 2)
    )
#+END_SRC
***** typescript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
    :mode "\\.ts\\'"
    )

(use-package tide
    :hook ((typescript-mode . #'setup-tide-mode)
           (before-save . tide-format-before-save))
    :init
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))
    :config
    (setq company-tooltip-align-annotations t
          tide-tsserver-executable "node_modules/typescript/bin/tsserver"
          typescript-indent-level 2)
    :bind (:map tide-mode-map
                ("C-f" . tide-fix))
    )
#+END_SRC
*** Elisp
#+BEGIN_SRC emacs-lisp
(setq lisp-indent-function 'common-lisp-indent-function)
(bind-key "C-h C-f" 'find-function-at-point emacs-lisp-mode-map)
(bind-key "C-h C-v" 'find-variable-at-point emacs-lisp-mode-map)
#+END_SRC
**** Dev
***** Namespaces elisp
[[https://github.com/Malabarba/Nameless][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package nameless
  :hook (emacs-lisp-mode . nameless-mode)
  :config
  (setq nameless-private-prefix t)
)
#+END_SRC
***** Testing
[[https://github.com/promethial/xtest#simple-buffer-testing][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package xtest
)
#+END_SRC
*** Php
#+BEGIN_SRC emacs-lisp
(use-package php-mode
    :mode "\\.php\\'")
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
    :mode "\\.rs\\'"
    )

(use-package company-racer
    :hook (racer-mode . company-mode)
    :config
    (add-to-list 'company-backends 'company-racer)
    )

(use-package racer
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode))
    :config
    (setq racer-cmd "~/.cargo/bin/racer.exe"
          racer-rust-src-path "C:/Program Files/Rust/source/src/")
  )

(use-package cargo
    :hook (rust-mode . cargo-minor-mode)
    :config
    (defun cargo-process--cleanup (buffer)
      (when (get-buffer-process (get-buffer buffer))
        (delete-process buffer)))
    (defvar cargo-process-history '())
    (defun cargo-process-run ()
      "Run the Cargo run command.
With the prefix argument, modify the command's invocation.
Cargo: Build and execute src/main.rs."
      (interactive)
      (cargo-process--start
       "Run"
       (read-string "Command: " "cargo run" '(cargo-process-history . 0))))

    (defun cargo-process-test (enable_print)
      "Run the Cargo test command.
With the prefix argument, modify the command's invocation.
Cargo: Run the tests."
      (interactive "P")
      (let* ((command "cargo test"))
        (when enable_print
          (concat command " -- --nocapture"))
        (cargo-process--start "Test" "cargo test"))
      )
    )

(use-package flycheck-rust
    :hook ((rust-mode . flycheck-mode)
           (flycheck-mode . flycheck-rust-setup))
    )
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
(use-package company-go
    :after go-mode
    :config
    (add-to-list 'company-backends 'company-go)
    )
(use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . flycheck-mode)
    )
#+END_SRC
*** nim
#+BEGIN_SRC emacs-lisp
(use-package nim-mode
    :mode "\\.nim\\'"
    :hook ((nim-mode . nimsuggest-mode)
           (nimsuggest-mode . company-mode)
           (nimsuggest-mode . flymake-mode))
    )
#+END_SRC
*** terraform
#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
    :mode "\\.tf\\'"
    )
#+END_SRC
*** graphql
#+BEGIN_SRC emacs-lisp
(use-package graphql-mode
    :mode ("\\.gql\\'" "\\.graphql\\'")
    )
#+END_SRC
*** lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
    :mode ("\\.lua\\'")
    )
#+END_SRC
*** AUCTeX
 #+BEGIN_SRC emacs-lisp
(use-package tex-mode
    :straight auctex
    :mode "\\.tex\\'"
    :hook (LaTeX-mode . turn-on-reftex)
    )
 #+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
    :mode ("\\.yml\\'" "\\.yaml\\'"))
#+END_SRC
*** sql
**** Sql-Indent
#+BEGIN_SRC emacs-lisp
(use-package sql-indent
    :mode "\\.sql\\'"
)
#+END_SRC
** Hungry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
    :init (global-hungry-delete-mode)
    :delight hungry-delete-mode
    )
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
    :commands restclient-mode
    )
#+END_SRC
** x509-mode
#+BEGIN_SRC emacs-lisp
(use-package x509-mode)
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
** quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun)
#+END_SRC
** esup
Emacs Start Up Profiler [[https://github.com/jschaf/esup][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package esup
    :commands esup)
#+END_SRC
** wakatime
#+BEGIN_SRC emacs-lisp
(use-package wakatime-mode
    :commands (global-wakatime-mode)
)
#+END_SRC
** [disabled]
:PROPERTIES:
:header-args: :tangle no
:END:
*** Cygwin
**** Cygwin-Mount
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (setenv "PATH" (concat "c:/cygwin64/bin;" (getenv "PATH")))
  (setq exec-path (cons "c:/cygwin64/bin/" exec-path))
  (use-package cygwin-mount
      :load-path "els/cygwin/"
      :config (cygwin-mount-activate)
      ))
#+END_SRC
*** helm
#+BEGIN_SRC emacs-lisp
(use-package helm-mode
    :disabled
    :after dumb-jump
    :init (helm-mode)
    :config
    (require 'helm-config)
    (setq helm-mode-fuzzy-match t
          helm-recentf-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-locate-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-completion-in-region-fuzzy-match t
          helm-ff-newfile-prompt-p nil
          helm-find-file-ignore-thing-at-point t
          helm-exit-idle-delay 0
          dumb-jump-selector 'helm)
    (helm-adaptive-mode t)
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           :map helm-find-files-map
           ("C-o" . helm-ff-run-switch-other-window))
    :delight 'helm-mode
    )
#+END_SRC
**** Ripgrep
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
    :after (helm-mode projectile)
    :config
    (setq helm-ag-base-command
          (format "rg --vimgrep --no-heading --smart-case --ignore-file %s/.config/ripgrep/ignore" (substitute-in-file-name "$HOME"))
          projectile-completion-system 'helm)
    :bind* ("C-M-s" . helm-do-ag-project-root)
    )
#+END_SRC
**** projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
    :after (helm-mode projectile)
    :init (helm-projectile-on)
    :bind* (("C-M-f" . helm-projectile-find-file)
            ("C-M-d" . helm-projectile-find-dir))
  )
#+END_SRC
*** Auto-Compile
[[https://github.com/tarsius/auto-compile][@github]]
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
    :init (auto-compile-on-load-mode)
    )
#+END_SRC
*** Winner-mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
**** No Vertical Split
#+BEGIN_SRC emacs-lisp
;; dont allow vertical split (windows top/bottom)
(setq split-height-threshold nil)
(setq split-width-threshold 80)
#+END_SRC
*** PackageManagement
**** Auto-update
[[https://github.com/rranelli/auto-package-update.el][@Github]]
#+BEGIN_SRC emacs-lisp
 (use-package auto-package-update
   :init

   :config
   ;;(auto-package-update-now)
 )
#+END_SRC
*** persp
#+BEGIN_SRC emacs-lisp
(use-package persp-mode
    :init
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-keymap-prefix (kbd "C-x p"))
    :config
    (persp-mode 1)
    )

(use-package persp-mode-projectile-bridge
    :after (projectile persp-mode)
    :init (persp-mode-projectile-bridge-mode 1)
    :config
    (if persp-mode-projectile-bridge-mode
        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
      (persp-mode-projectile-bridge-kill-perspectives))
    )
#+END_SRC
*** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (setq yas-verbosity 2)
  :config
  (yas-global-mode 1)
  (unbind-key "<tab>" yas-minor-mode-map)
  (unbind-key "TAB" yas-minor-mode-map)
  (bind-key "C-<tab>" 'yas-expand yas-minor-mode-map)
  )
#+END_SRC
*** Google-translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :init
  (require 'google-translate-smooth-ui)
  :bind ("C-c t" . google-translate-smooth-translate)
  :config
  (setq google-translate-translation-directions-alist
  '(("de" . "en") ("en" . "de") ("de" . "fr") ("de" . "es")))
  (setq google-translate-pop-up-buffer-set-focus t)
)
#+END_SRC
*** ido
#+BEGIN_SRC emacs-lisp
(use-package ido
:init
:config
(ido-mode t)
(ido-everywhere t)
(bind-keys ("M-#" . ido-switch-buffer)
("M-ö" . my/switch-to-previous-buffer))
(bind-keys :map ido-common-completion-map
            ("M-#" . ido-next-match)
            ("M-ö" . ido-prev-match)))
#+END_SRC
**** config
#+BEGIN_SRC emacs-lisp
(setq ido-case-fold t
      ido-enable-flex-matching t
      ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*"
         "*Messages*" "Async Shell Command"))

;; ;; If a buffer name that doesn't exist is chosen, just make a new one without prompting
;; (setq ido-create-new-buffer 'always)

;; Ignore the .aux extensions that TeX programs create
(setq completion-ignored-extensions
      (cons "*.aux" completion-ignored-extensions))


;;; Ignore files defined in variable completion-ignored-extensions
(setq ido-ignore-extensions t)

;;; Order extensions by how I use them
(setq ido-file-extensions-order '(".tex"  ".txt" ".py" ".sh" ".el" ".xml" ".htm"))

;;; Keep annoying buffers out of my face
(setq ido-ignore-buffers (list (rx (or (and bos  " ")
                                       (and bos
                                            (or "*Completions*"
                                                "*Shell Command Output*"
                                                "*vc-diff*")
                                            eos)))))

;;(add-to-list 'ido-ignore-files "\\`media/")
#+END_SRC
**** flx-ido
#+BEGIN_SRC emacs-lisp
(use-package flx-ido
:init
(flx-ido-mode 1)

:config
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
)
#+END_SRC
*** Floobits
#+BEGIN_SRC emacs-lisp
(use-package floobits)
#+END_SRC
*** aggressive-indent
[[https://github.com/Malabarba/aggressive-indent-mode][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
    :init (global-aggressive-indent-mode 1)

#+END_SRC
*** pomodoro
#+BEGIN_SRC emacs-lisp
(use-package pomodoro
    :config (pomodoro-add-to-mode-line)
    (setq pomodoro-time-format "%.2m"
          pomodoro-play-sounds nil
          pomodoro-work-time 20
          pomodoro-break-time 10
          pomodoro-long-break-time 20
          pomodoro-nth-for-longer-break 3))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC
*** NeoTree
#+BEGIN_SRC emacs-lisp
(use-package neotree
    :commands neotree
    )
#+END_SRC
*** Ispell/Aspell
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "C:\\cygwin64\\bin\\aspell.exe"
      ispell-really-aspell t
      ispell-extra-args '("--sug-mode=fast")
      ;; TODO name deutsch+english
      ispell-dictionary "deutsch"
      flyspell-issue-message-flag nil)
#+END_SRC
**** Aspell - spell checking for multiple languages
[[https://wiki.archlinux.org/index.php/User:Georgek][@wiki.archlinux]]
combine dictionary deutsch + english
#+BEGIN_SRC sh :tangle no
# TODO replace ru with de
cd /usr/lib/aspell
grep '^special' en.dat >>ru.dat
aspell dump master en >w.en
aspell dump master ru-yo >w.ru
cat w.ru w.en >w.all
aspell --lang=ru --encoding=UTF-8 create master ruen.rws < w.all
rm -f w.ru w.en w.all
echo "add ruen.rws" > ru.multi
#+END_SRC
*** IPython Emacs Notebook (EIN)
#+BEGIN_SRC emacs-lisp
(use-package ein
    :commands ein:notebooklist-open
  )
#+END_SRC
*** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
    )
#+END_SRC
*** Scss-Mode
#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode ("\\.scss\\'")
)
#+END_SRC
*** Emmet-Mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :init
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  :config
)
#+END_SRC
*** Disabled
maybe for linux
#+BEGIN_SRC emacs-lisp
(setq select-active-regions nil)
#+END_SRC
**** jabber
#+BEGIN_SRC emacs-lisp
(setq jabber-account-list
      '(("jan.moeller0@gmail.com"
   (:network-server . "talk.google.com")
   (:connection-type . ssl)
   (:port . 5223))))
#+END_SRC
*** Exercism
#+BEGIN_SRC emacs-lisp
(use-package exercism
    :load-path "els/exercism/"
    :if (my-util-installed? "exercism")
    :config (when (my-util-win?)
        (setq *exercism-cmd*
        (shell-quote-argument "C:\\\\Program Files\\\\Exercism\\\\exercism.exe"))))
#+END_SRC
*** Sqlite
#+BEGIN_SRC emacs-lisp
(use-package esqlite
  :init
  :config
)
#+END_SRC
*** Multiple-Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
    :bind* ("C-<down-mouse-1>" . mc/add-cursor-on-click)
    :config
    (setq mc/list-file (concat user-emacs-directory "config/.mc-lists.el"))
    ;;'(mc/cursor-face ((nil (:background "orange"))))
    )
#+END_SRC
*** Els
**** Spell-number
#+BEGIN_SRC emacs-lisp
(use-package spell-number
             :load-path "els/spell-number/")
#+END_SRC
* Style
** Theme
todo https://github.com/alezost/alect-themes
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq-default cursor-type 'bar)
(use-package gruvbox-theme
    :defer t
    :init
    (defun my/load-theme ()
      (load-theme 'gruvbox-light-hard t)
      (spaceline-spacemacs-theme)
      (set-face-attribute 'sp-show-pair-match-face nil :foreground "green" :background nil)
      (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil)
      ;; (set-face-attribute 'region nil :background "darkblue")
      (set-cursor-color "royal blue")
      (set-face-attribute 'show-paren-match nil :background nil)
      (split-window-horizontally)
      (display-buffer "*Messages*")

      (set-face-attribute 'magit-diff-added-highlight nil :background "#bde9bd" :foreground "#22aa22")
      (set-face-attribute 'magit-diff-added nil :background "#ddffdd" :foreground "#22aa22")
      (set-face-attribute 'diff-refine-added nil :background "#b3fcb3")
      (set-face-attribute 'magit-diff-removed-highlight nil :background "#e9bdbd" :foreground "#aa2222")
      (set-face-attribute 'magit-diff-removed nil :background "#efd0d0" :foreground "#aa2222")

      (set-face-attribute 'magit-section-highlight nil :background "#efe2c2")
      (set-face-attribute 'org-block nil :foreground "#282828")

      (set-face-attribute 'isearch nil :foreground "#f4ecd6")
      (set-face-attribute 'highlight nil :background "#e4cf9a")
      )

    (if (daemonp)
        (add-hook 'after-make-frame-functions (lambda (frame)
                                                (select-frame frame)
                                                (my/load-theme)
                                                (exec-path-from-shell-initialize)
                                                ))
      (my/load-theme)
      ))
#+END_SRC
** [disabled]
:PROPERTIES:
:header-args: :tangle no
:END:
*** visual-line-mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
(delight 'visual-line-mode)
#+END_SRC
* Emacs Server (Windows)
#+BEGIN_SRC emacs-lisp
(when (my-util-win?)
  (server-start))
#+END_SRC
* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* meta
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]]
*** [[https://github.com/jwiegley/dot-emacs][jwiegley dot-emacs]]
*** [[https://www.reddit.com/r/emacs/comments/3obmoh/emacs_for_writers_presentation_by_jay_dixit/][Emacs for writers]]
- org-bullets
** packages maybe Futur
*** Focus [[https://github.com/larstvei/Focus/blob/master/README.md][@github.com]]
*** finance https://github.com/ledger/ledger-mode
** todo
- magit diff args -> git global config
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)
** my-own-tips
C-c C-o save search results
