; -*- eval: (org-init-mode 1); lexical-binding: t -*-
* Initialize
** Initialize straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t
      use-package-compute-statistics nil)
#+END_SRC
** Coding Environment
[[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][@masteringemacs]]
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (prefer-coding-system 'utf-8-unix)
  (setq buffer-file-coding-system 'utf-8-unix
        default-file-name-coding-system 'utf-8-unix
        utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
        locale-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8-unix)
  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8-unix)))

(require 'bind-key)
(use-package delight)
(use-package cl-lib)
(use-package f)
(use-package gcmh
  :init (gcmh-mode 1)
  :delight)
(use-package explain-pause-mode
  :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode")
  :commands explain-pause-mode)
#+END_SRC
** my/org-init
#+BEGIN_SRC emacs-lisp
(use-package org-init
    :after org
    :straight nil
    :commands (org-init-mode org-init-open)
    :load-path "my/org-init")
#+END_SRC
** My/Utils
#+BEGIN_SRC emacs-lisp
(use-package my-util
    :straight nil
    :functions my-util-ensure-emacs-dir my-util-win?
    :load-path "my/my-utils")
#+END_SRC
* Core
** Read env vars
 #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-arguments '("-i")
          exec-path-from-shell-variables '("DISPLAY" "XAUTHORITY"))
    (my-util-with-eval-after-frame
     (exec-path-from-shell-initialize)))
 #+END_SRC
** My Values
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/"
      custom-file (expand-file-name "custom.el" user-emacs-directory)
      browse-url-generic-program (executable-find (getenv "BROWSER"))
      browse-url-browser-function 'browse-url-generic
      require-final-newline t
      read-process-output-max (* 1024 1024)
      enable-local-eval t
      mouse-wheel-scroll-amount '(2 ((shift) . 2))
      mouse-wheel-progressive-speed nil
      same-window-buffer-names '("*Help*")
      Man-notify-method 'pushy
      display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))

(setq-default indent-tabs-mode nil
              tab-width 2
              sentence-end-double-space nil)
#+END_SRC
*** Backup & autosave
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      create-lockfiles nil
      kept-old-versions 2
      version-control t
      emacs-tmp-dir (my-util-ensure-emacs-dir "tmp/")
      backup-directory-alist `(("." . ,emacs-tmp-dir))
      auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))
      auto-save-list-file-prefix emacs-tmp-dir)
#+END_SRC
** Start-Up
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq-default major-mode 'indented-text-mode)
#+END_SRC
** littlest things
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(column-number-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-handled-backends nil)
(delete-selection-mode 1)
(normal-erase-is-backspace-mode 1)
(global-so-long-mode 1)
(setq initial-scratch-message nil)
(setq ring-bell-function 'ignore
      vc-follow-symlinks t)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(mouse-avoidance-mode)
#+END_SRC
*** Kill active process buffer no prompt
#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC
** secrets
#+BEGIN_SRC emacs-lisp
(require 'auth-source-pass)
(require 'secrets)
(auth-source-pass-enable)
(setq auth-sources '(password-store))
#+END_SRC
** eldoc
#+BEGIN_SRC emacs-lisp
(delight 'eldoc-mode nil "eldoc")
#+END_SRC
** Navigation
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-q" . universal-argument)

 ("C-ö" . windmove-left)
 ("C-#" . windmove-right)
 ("C-ü" . windmove-up)
 ("C-ä" . windmove-down)
 ("C-Ü" . clone-indirect-buffer)

 ("M-r" . revert-buffer)

 ("C-M-k" . kill-this-buffer)
 ("C-l" . goto-line)
 ("M-_" . shell-command)
 ("M-," . pop-global-mark)
 ("C-h C-f" . find-function-at-point)
 ("C-h C-v" . find-variable-at-point)

 ;; delete other window
 ("C-x q" . (lambda () (interactive) (delete-window (other-window 1)))))

(bind-keys
 ("M-ö"  . left-char)
 ("M-#" . right-char)
 ("M-ü" . previous-line)
 ("M-ä" . next-line)

 ;; disable overwrite
 ("<insert>" . nil)

 ("C-x b" . nil)

;; disable mouse-wheel zoom
("<C-mouse-4>" . nil)
("<C-mouse-5>" . nil)
("<f5>" . profiler-start)
("<f6>" . profiler-stop))
#+END_SRC
** Functions
*** Line manouevor functions
**** Copy-line-or-Region
#+BEGIN_SRC emacs-lisp
(defun xah-copy-line-or-region ()
  "Copy current line, or text selection.
When `universal-argument' is called first, copy whole buffer (but respect `narrow-to-region')."
  (interactive)
  (let (p1 p2)
    (if (null current-prefix-arg)
        (progn (if (use-region-p)
                   (progn (setq p1 (region-beginning))
                          (setq p2 (region-end)))
                 (progn (setq p1 (line-beginning-position))
                        (setq p2 (line-end-position)))))
      (progn (setq p1 (point-min))
             (setq p2 (point-max))))
    (kill-ring-save p1 p2)))

(bind-key "M-w" 'xah-copy-line-or-region)
#+END_SRC
**** Smart delete
#+BEGIN_SRC emacs-lisp
(defun my/delete-whitespace-or-word ()
  (interactive)
  (if (looking-at "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (kill-word 1)))

(defun my/backward-delete-whitespace-or-word ()
  (interactive)
  (if (looking-back "\\(\t\\|  \\)")
      (delete-horizontal-space)
    (backward-kill-word 1)))

(bind-key "C-<backspace>" 'my/backward-delete-whitespace-or-word)
(bind-key "C-M-<backspace>" 'my/delete-whitespace-or-word)

(bind-key "C-a" 'back-to-indentation)
#+END_SRC
*** Misc
**** Capitalize Word
#+BEGIN_SRC emacs-lisp
(defun my/capitalize-previous-word()
  (interactive)
  (capitalize-word -1))
#+END_SRC
**** sort lines caseinsensitive
#+BEGIN_SRC emacs-lisp
(defun my/sort-lines-nocase ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))
#+END_SRC
*** b64encode-no-break
#+BEGIN_SRC emacs-lisp
(defun my/base64-encode-region-no-break ()
  (interactive)
  (base64-encode-region (mark) (point) t))
#+END_SRC
*** rm newlines
#+BEGIN_SRC emacs-lisp
(defun my/remove-newlines-in-region ()
  "Removes all newlines in the region."
  (interactive)
  (save-restriction
    (narrow-to-region (point) (mark))
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match "" nil t))))
#+END_SRC
*** indent-rigidly
#+BEGIN_SRC emacs-lisp
;; do not skip first line when indenting
(defun my/indent-rigidly(start end arg &optional interactive)
  (interactive "r\nP\np")
  (when (use-region-p)
    (goto-char start)
    (beginning-of-line)
    (deactivate-mark)
    (set-mark (point))
    (goto-char end))
  (call-interactively 'indent-rigidly))
(bind-key* "C-x <tab>"  'my/indent-rigidly)
#+END_SRC
* Packages
** Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package reveal
    :hook (org-mode . reveal-mode)
    :delight reveal-mode)

(use-package org
    :straight org-plus-contrib
    :mode ("\\.org\\'" . org-mode)
    :config
    (require 'org-checklist)
    (org-indent-mode 1)
    (setq org-startup-indented t
          org-blank-before-new-entry '((heading . nil)
                                       (plain-list-item . nil))
          org-return-follows-link nil
          org-support-shift-select t
          org-image-actual-width '(500)
          org-list-allow-alphabetical t
          org-use-property-inheritance t
          org-use-sub-superscripts nil
          org-checkbox-hierarchical-statistics t)

    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb))
    :delight org-indent-mode)

(use-package my-org
    :after org
    :straight nil
    :bind (:map org-mode-map
                ("C-c C-M-e" . my-org-export-all)
                ("M-c" . my/capitalize-previous-word))
    :load-path "my/my-org")
#+END_SRC
*** Config
**** Export
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil
      org-export-with-section-numbers nil)
#+END_SRC
**** Capture
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t
      org-datetree-add-timestamp 1
      org-extend-today-until 6
      org-duration-format (quote h:mm)
      org-outline-path-complete-in-steps nil
      org-hide-emphasis-markers t
      org-refile-targets '((nil :level . 2)))
(bind-key "C-c c" 'org-capture)
#+END_SRC
**** Babel
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-pretty-entities t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window
      org-edit-src-auto-save-idle-delay 60)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (python . t)
   (gnuplot . t)
   (shell . t)
   (sql . t)))
#+END_SRC
**** Encryption
#+BEGIN_SRC  emacs-lisp
(require 'epa-file)
(setq epa-file-select-keys nil)
#+END_SRC
**** Latex
#+BEGIN_SRC emacs-lisp
;;(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(cl-pushnew '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
            org-latex-classes :test 'equal)
(setq org-latex-preview-ltxpng-directory (concat temporary-file-directory "ltxpng/"))
#+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
(bind-keys :map org-mode-map
("<return>" . org-return-indent)
("M-S-<delete>" . my/org-delete-heading-or-line)
("C-M-<left>" . org-backward-sentence)
("C-M-<right>" . org-forward-sentence)
("C-M-<end>" . org-sentence-newline)
("C-c l" . my/insert-link))
#+END_SRC
** Style
*** Adaptive-Wrap
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
    :init
    (define-globalized-minor-mode adaptive-wrap-global-mode
        adaptive-wrap-prefix-mode
      adaptive-wrap-prefix-mode)
    (adaptive-wrap-global-mode 1))
#+END_SRC
** View large files
#+BEGIN_SRC emacs-lisp
(use-package vlf
    :commands (vlf-mode vlf)
    :init
    (require 'vlf-setup))
#+END_SRC
** Minor Modes
*** Drag-stuff
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
    :init
    (drag-stuff-global-mode 1)
    :config
    (cl-pushnew 'org-mode drag-stuff-except-modes)
    :bind (:map drag-stuff-mode-map
                ("M-<up>" . drag-stuff-up)
                ("M-<down>" . drag-stuff-down))
    :delight drag-stuff-mode)
#+END_SRC
*** whitespace-cleanup-mode
[[https://github.com/purcell/whitespace-cleanup-mode][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
    :init (global-whitespace-cleanup-mode 1)
    :delight whitespace-cleanup-mode)
#+END_SRC
*** format-all
[[https://github.com/purcell/whitespace-cleanup-mode][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package format-all
    :bind* ("C-f f" . format-all-buffer)
    :hook
    ((elixir-mode sh-mode css-mode js-mode web-mode scss-mode go-mode rust-mode terraform-mode)
     . format-all-mode)
    :delight format-all-mode)
#+END_SRC
*** bufler
#+BEGIN_SRC emacs-lisp
(use-package bufler
  :straight (:host github :repo "alphapapa/bufler.el")
  :bind* (("C-M-x" . bufler-switch-buffer)
          ("C-v" . bufler))
  :init (bufler-mode)
  :config
  (setq bufler-workspace-switch-buffer-sets-workspace t)
  ;; delight doesn't work
  (defun bufler-workspace-mode-lighter () ""))
  ;; (setq bufler-groups
  ;;       (bufler-defgroups
  ;;           (group
  ;;            ;; Subgroup collecting all named workspaces.
  ;;            (auto-workspace))
  ;;           (group
  ;;           (group-or "*Special*"
  ;;            ;; Subgroup collecting these "special special" buffers
  ;;            ;; separately for convenience.
  ;;            (name-match "**Special**"
  ;;                        (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*"))
  ;;            (mode-match "*Help*" (rx bos "help-"))
  ;;            (mode-match "*Info*" (rx bos "info-"))))
  ;;         (group
  ;;          ;; Subgroup collecting buffers in a version-control project,
  ;;          ;; grouping them by directory.
  ;;          (auto-project))
  ;;         ;; Group remaining buffers by directory, then major mode.
  ;;         (group
  ;;          ;; Subgroup collecting all special buffers (i.e. ones that are not
  ;;          ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
  ;;          ;; through to other groups, so they end up grouped with their project buffers).
  ;;          (group-and "*Meta*"
  ;;                     (lambda (buffer)
  ;;                       (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
  ;;                                            buffer)
  ;;                                   (funcall (mode-match "Dired" (rx bos "dired"))
  ;;                                            buffer)
  ;;                                   (funcall (auto-file) buffer))
  ;;                         "*Special*")))
  ;;          (group
  ;;           ;; Subgroup collecting all other Magit buffers, grouped by directory.
  ;;           (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
  ;;           )
  ;;          ;; Remaining special buffers are grouped automatically by mode.
  ;;          (auto-directory))
  ;;         )))
#+END_SRC
*** Buffer-move
https://github.com/lukhas/buffer-move
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
    :init
    (bind-key* "C-M-Ö" (lambda () (interactive) (insert "ö")))
    (bind-key* "C-M-Ä" (lambda () (interactive) (insert "ä")))
    (bind-key* "C-M-'" (lambda () (interactive) (insert "#")))
    :bind*
    ("C-M-#" . buf-move-right)
    ("C-M-ö" . buf-move-left)
    ("C-M-ü" . buf-move-up)
    ("C-M-ä" . buf-move-down))
#+END_SRC
*** crux
https://github.com/bbatsov/crux
#+BEGIN_SRC emacs-lisp
(use-package crux
    :config
    (defun my/kill-line-or-region ()
      (interactive)
      (if (use-region-p)
          (kill-region (region-beginning) (region-end))
        (crux-smart-kill-line)))

    :bind* (("C-f r" . crux-rename-file-and-buffer)
            ("C-f d" . crux-delete-file-and-buffer)
            ("C-w" . my/kill-line-or-region))
    :bind (
           ;; not global because conflict with org-mode new heading
           ("C-<return>" . crux-smart-open-line)
           ("M-<return>" . crux-smart-open-line-above))
    )
#+END_SRC
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
    :hook (css-mode org-mode help-mode)
    :delight rainbow-mode)
#+END_SRC
*** kurecolor
#+BEGIN_SRC emacs-lisp
(use-package kurecolor :defer t)
#+END_SRC
*** Evil-Nerd-Commenter
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys)
    )
#+END_SRC
*** Outshine
#+BEGIN_SRC emacs-lisp
(use-package outshine
    :commands outshine-mode)

(use-package navi-mode
    :commands navi-mode)
#+END_SRC
*** Company-Mode
#+BEGIN_SRC emacs-lisp
(use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0.3
          company-minimum-prefix-length 1
          company-tooltip-align-annotations t
          company-dabbrev-downcase nil
          company-echo-delay 0)
    :bind (:map company-active-map
                ("C-ä" . company-select-next)
                ("C-ü" . company-select-previous))
    :delight company-mode)
#+END_SRC
*** Centered-Window-Mode
#+BEGIN_SRC emacs-lisp
(use-package centered-window
    :init
    (centered-window-mode 1)
    :config
    (setq cwm-use-vertical-padding t
                cwm-frame-internal-border 0
                cwm-incremental-padding t
                cwm-incremental-padding-% 2
                cwm-left-fringe-ratio 0
                cwm-centered-window-width 130)
    :delight centered-window-mode)
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-backward-sexp)
                ("C-M-e" . sp-forward-sexp)
                ("C-S-<backspace>" . sp-backward-kill-sexp)
                ("C-M-<down>" . sp-select-next-thing))
    :init
    (smartparens-global-mode 1)
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (setq blink-matching-paren nil)
    :delight smartparens-mode)
#+END_SRC
*** Undo-Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
    :init
    (global-undo-tree-mode 1)
    :bind* (("C-p" . undo-tree-undo)
            ("M-p" . undo-tree-redo)
            ("C-M-p" . undo-tree-visualize))
    :delight undo-tree-mode)
#+END_SRC
*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+BEGIN_SRC emacs-lisp
(setq ediff-keep-variants nil)
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally)
(add-hook 'ediff-prepare-buffer-hook 'show-all)
#+END_SRC
*** Expand-Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :bind* (("C-M-w" . er/expand-region)
            ("C-M-q" . er/contract-region))
    :config
    (setq expand-region-fast-keys-enabled nil)
    (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :commands flycheck-mode)
#+END_SRC
*** Ripgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep :defer t)
(use-package rg :defer t)
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package flx)
(use-package avy)
(use-package smex)

(use-package ivy
    :after (flx avy smex)
    :init (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "

          ;; fuzzy matching for counsel-M-x
          ivy-re-builders-alist
          '((counsel-M-x . ivy--regex-fuzzy)
            (counsel-describe-function . ivy--regex-fuzzy)
            (counsel-describe-variable . ivy--regex-fuzzy)
            (t . ivy--regex-plus))

          ;; no ^ for the fuzzy matching cmds
          ivy-initial-inputs-alist
          '((counsel-package . "^+ ")
            (org-refile . "^")
            (org-agenda-refile . "^")
            (org-capture-refile . "^")
            (counsel-M-x . "")
            (counsel-describe-function . "")
            (counsel-describe-variable . "")
            (counsel-org-capture . "^")
            (Man-completion-table . "^")
            (woman . "^"))

          ivy-extra-directories '("./")
          magit-completing-read-function 'ivy-completing-read)


    :bind (:map ivy-minibuffer-map
                ("M-ö" . counsel-up-directory)
                ("M-#" . ivy-alt-done)
                ("C-r" . ivy-previous-line-or-history)
                ("M-ä" . ivy-next-line)
                ("C-x C-s" . ivy-occur)
                ("M-ü" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-k" . ivy-switch-buffer-kill))
    :delight ivy-mode)

(use-package ivy-hydra
    :after (ivy hydra))


(use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))

(use-package counsel
    :after swiper
    :init (counsel-mode 1)
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-s" . counsel-grep-or-swiper))
    :delight counsel-mode)

(use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1))

(use-package counsel-projectile
    :commands (counsel-projectile-mode)
    :after (counsel projectile)
    :init (counsel-projectile-mode 1)
    :config
    (setq projectile-completion-system 'ivy
          counsel-projectile-switch-project-action 'counsel-projectile-switch-project-by-name
          )
    :bind* (("C-M-f" . counsel-projectile-find-file)
            ("C-M-d" . counsel-projectile-find-dir)
            ("C-M-c" . counsel-projectile-switch-project)
            ("C-M-s" . counsel-projectile-rg)))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
    :commands projectile-mode
    :init (projectile-mode 1)
    :config
    (setq projectile-file-exists-remote-cache-expire nil
          projectile-switch-project-action
          (lambda ()
            (let ((project-buffer (car (projectile-project-buffers))))
              (if project-buffer
                  (progn
                    (bufler-workspace-focus-buffer project-buffer)
                    (bufler-switch-buffer))
                (progn
                  (projectile-vc)
                  (bufler-workspace-focus-buffer (current-buffer)))
                )))
          projectile-enable-caching t
          projectile-ignored-project-function
          (function (lambda (path)
            (let ((straight-dir (format "%s/%s" (f-filename user-emacs-directory) "straight")))
              (message "%s" path)
              (string-match-p (regexp-quote straight-dir) path)))))

    :bind* (("C-M-r" . projectile-replace-regexp)
            ("C-c p" . projectile-command-map))
    :delight projectile-mode)
#+END_SRC
*** which-key
[[https://github.com/justbur/emacs-which-key?utm_medium=referral&utm_campaign=ZEEF&utm_source=https%3A%2F%2Femacs.zeef.com%2Fehartc][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :init (which-key-mode 1)
    :delight which-key-mode)
#+END_SRC
*** dumb-jump
[[https://github.com/jacktasia/dumb-jump][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :config
    (setq dumb-jump-prefer-searcher 'rg
          dumb-jump-selector 'ivy)
    :bind ("C-M-." . dumb-jump-go))
#+END_SRC
** Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
    :init (editorconfig-mode 1)
    :delight editorconfig-mode)
#+END_SRC
** logview
#+BEGIN_SRC emacs-lisp
(use-package logview
    :commands logview-mode)
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
(use-package my-hydra
    :after hydra
    :straight nil
    :load-path "my/my-hydra"
    :bind* ("C-M-m" . hydra-my/init/body))
#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp-deferred
  :init
  (cl-defun my/lsp-format-buf ((&optional (format t)) (&optional (organize-imports t)))
    (add-hook 'before-save-hook
              (lambda () (lsp-format-buffer) (lsp-organize-imports)) 0 t))
  :config
  (setq lsp-enable-snippet t
        lsp-signature-doc-lines 1
        lsp-signature-auto-activate t)
  (cl-pushnew "[/\\\\]venv$" lsp-file-watch-ignored)
  (cl-pushnew "[/\\\\]\\.mypy_cache$" lsp-file-watch-ignored)
  (cl-pushnew "[/\\\\]\\.pytest_cache$" lsp-file-watch-ignored)
  (cl-pushnew "[/\\\\]dot_git$" lsp-file-watch-ignored)
  :bind (:map lsp-mode-map
              ("M-." . lsp-goto-implementation)
              ("M--" . lsp-execute-code-action)))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package dap-mode
    :commands dap-debug
    :config
    (setq dap-auto-configure-features '(sessions locals))
    (dap-auto-configure-mode)
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra))))

(use-package lsp-ui
    :commands lsp-ui-mode
    :init (setq lsp-ui-doc-enable nil
                lsp-ui-sideline-enable t))
#+END_SRC
** realgud
#+BEGIN_SRC emacs-lisp
;; M-x load-library realgud
(use-package realgud
    :straight (:host github :repo "realgud/realgud" :no-autoloads t)
    :defer t)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :commands magit-status
    :init
    (setq magit-auto-revert-mode nil)
    :config
    (setq magit-diff-section-arguments (quote ("--no-ext-diff" "-U2"))
          magit-diff-refine-ignore-whitespace nil
          magit-refs-margin '(t age magit-log-margin-width nil 18)
          magit-diff-refine-hunk t)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-upstream
                            'magit-insert-unpulled-from-upstream))

(use-package forge
    :after magit
    :defer t
    :straight (:host github :repo "magit/forge"))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(use-package dired+
  :straight (dired-plus)
  :demand t
  :config
  (diredp-make-find-file-keys-reuse-dirs)
  (setq dired-listing-switches "-aDhvl --group-directories-first"
        dired-auto-revert-buffer t)
  :bind (("C-x d" . nil)
         :map dired-mode-map
         ("?" . my/dired-get-size)
         ("M-ö" . dired-up-directory)
         ("M-#" . dired-find-file)))

(use-package dired-filter
    :hook (dired-mode . dired-filter-mode)
    :config (setq dired-filter-verbose nil)
    :delight dired-filter-mode)
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
(defun my/dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
               (progn
                 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
     (match-string 1))))))
#+END_SRC
** Languages
*** Elixir
**** Elixir Mode
https://github.com/elixir-lang/emacs-elixir
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
    :mode "\\.ex\\'")
#+END_SRC
**** Alchemist
https://github.com/tonini/alchemist.el
#+BEGIN_SRC emacs-lisp
(use-package alchemist
    :hook (elixir-mode . alchemist-mode)
    :bind (:map alchemist-mode-map
                ("C-c C-c" . alchemist-iex-compile-this-buffer)
                ("C-c a s" . my/phoenix-start))
    :config
    (defun my/phoenix-start ()
      (interactive)
      (if (alchemist-project-p)
          (let ((default-directory (alchemist-project-root)))
            (pop-to-buffer
             (process-buffer
              (or (if (buffer-live-p alchemist-iex-buffer)
                      (get-buffer-process alchemist-iex-buffer))
                  (progn
                    (alchemist-iex-start-process '("iex" "-S" "mix" "phx.server"))
                    (alchemist-iex-process))))
             ))))
    )
#+END_SRC
**** flycheck-credo
#+BEGIN_SRC emacs-lisp
(use-package flycheck-credo
    :after elixir-mode
    :hook (elixir-mode . flycheck-mode)
    :config
    (flycheck-credo-setup)
    (setq flycheck-elixir-credo-strict nil))
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
    :mode "\\.md\\'"
    :hook (markdown-mode . (lambda ()
                             (whitespace-cleanup-mode 0)
                             (goto-address-mode))))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode))

(use-package lsp-pyright
    :init
  :config
  (require 'dap-python)
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred)
                          (my/lsp-format-buf))))
#+END_SRC
*** Web
**** HTML/CSS
***** css
#+BEGIN_SRC emacs-lisp
(use-package css-mode
    :mode ("\\.less\\'" "\\.css\\'" "\\.sass\\'" "\\.scss\\'")
    :config
    (setq css-indent-offset 4))
#+END_SRC
**** JS
***** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
    :mode "\\.js\\'"
    :config
    (setq js2-basic-offset 2
          js2-strict-inconsistent-return-warning nil)
    )
#+END_SRC
***** Web-mode
[[http://web-mode.org/][@web-mode.org]]
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'" "\\.tsx\\'")
    :config
    ;; (require  'company-web-html)
    (setq web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-attr-indent-offset 2
          web-mode-attr-value-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-style-padding 2
          web-mode-script-padding 0
          web-mode-block-padding 0
          web-mode-enable-control-block-indentation nil
          web-mode-enable-auto-closing t
          web-mode-enable-auto-indentation nil
          web-mode-content-types-alist
          '(("css" . "\\.\\(s?css\\|css\\.erb\\)\\'")
            ("jsx" . "\\.\\([jt]s\\|[jt]s\\.erb\\)\\'")
            ("json" . "\\.\\(api\\|json\\|jsonld\\)\\'")
            ("jsx" . "\\.[jt]sx\\'")
            ("xml" . "\\.xml\\'")
            ("html" . ".")))
    )
#+END_SRC
***** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
    :mode "\\.json\\'"
    :config
    (setq json-reformat:indent-width 2
          js-indent-level 2))
#+END_SRC
***** typescript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . (lambda ()
                                (lsp-deferred)
                                (my/lsp-format-buf)))
    :config (setq lsp-eslint-server-command
                  '("node"
                    (expand-file-name"~/.local/vscode-eslint/extension/server/out/eslintServer.js")
                    "--stdio")))
    #+END_SRC
*** Elisp
#+BEGIN_SRC emacs-lisp
(setq lisp-indent-function 'common-lisp-indent-function)
#+END_SRC
**** Dev
***** Namespaces elisp
[[https://github.com/Malabarba/Nameless][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package nameless
  :hook (emacs-lisp-mode . nameless-mode)
  :config
  (setq nameless-private-prefix t)
)
#+END_SRC
***** Testing
[[https://github.com/promethial/xtest#simple-buffer-testing][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package xtest
    :defer t)
#+END_SRC
*** Php
#+BEGIN_SRC emacs-lisp
(use-package php-mode
    :mode "\\.php\\'")
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
    :mode "\\.rs\\'"
    :config (setq lsp-rust-server 'rust-analyzer
                  rust-match-angle-brackets nil)
    :hook (rust-mode . lsp-deferred))
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
(use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . lsp-deferred)
    :init (require 'dap-go))
#+END_SRC
*** nim
#+BEGIN_SRC emacs-lisp
(use-package nim-mode
    :mode "\\.nim\\'"
    :hook ((nim-mode . nimsuggest-mode)
           (nimsuggest-mode . company-mode)))
#+END_SRC
*** terraform
#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
    :mode "\\.tf\\'")
#+END_SRC
*** graphql
#+BEGIN_SRC emacs-lisp
(use-package graphql-mode
    :mode ("\\.gql\\'" "\\.graphql\\'"))
#+END_SRC
*** lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
    :mode ("\\.lua\\'"))
#+END_SRC
*** AUCTeX
 #+BEGIN_SRC emacs-lisp
(use-package tex-mode
    :straight auctex
    :mode "\\.tex\\'"
    :hook (LaTeX-mode . turn-on-reftex))
 #+END_SRC
*** Plantuml
 #+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
    :mode "\\.puml\\'"
    :config
    (setq plantuml-executable-path "/usr/bin/plantuml"
          plantuml-default-exec-mode 'executable))
 #+END_SRC
*** adoc
 #+BEGIN_SRC emacs-lisp
(use-package adoc-mode
    :mode "\\.adoc\\'")
 #+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
    :mode ("\\.yml.*\\'" "\\.yaml.*\\'"))
#+END_SRC
*** sql
#+BEGIN_SRC emacs-lisp
(use-package sql-indent
    :mode "\\.sql\\'")
#+END_SRC
** Hungry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
    :init (global-hungry-delete-mode)
    :delight hungry-delete-mode)
#+END_SRC
** ledger
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
    :mode "\\.ledger\\'")
#+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp
(use-package mu4e
    :hook (mu4e-compose-pre . my-mu4e-set-account)
    :straight nil
    :commands mu4e
    :config

    (setq starttls-use-gnutls t
      starttls-gnutls-program "gnutls-cli"
      starttls-extra-arguments nil)

    (setq
     send-mail-function 'smtpmail-send-it
     message-send-mail-function 'smtpmail-send-it
     mu4e-get-mail-command "offlineimap"
     mu4e-maildir       "~/mail"   ;; top-level Maildir
     mu4e-sent-folder   "/sent"       ;; folder for sent messages
     mu4e-drafts-folder "/drafts"     ;; unfinished messages
     mu4e-trash-folder  "/trash"      ;; trashed messages
     mu4e-refile-folder "/archive"
     mu4e-attachment-dir "~/downloads"
     mu4e-sent-messages-behavior 'delete)   ;; saved messages


    ;; Now I set a list of
    (defvar my-mu4e-account-alist
      '(("iogroup"
         (mu4e-sent-folder "/iogroup/sent")
         (user-mail-address "jm@datawerk.de")
         (smtpmail-smtp-user "jm@iogroup.org")
         (smtpmail-local-domain "iogroup.org")
         (smtpmail-default-smtp-server "smtp.office365.com")
         (smtpmail-smtp-server "smtp.office365.com")
         (smtpmail-stream-type starttls)
         (smtpmail-smtp-service 587)
         )
        ("gmail"
         (mu4e-drafts-folder "/[Google Mail].Drafts")
         (mu4e-sent-folder   "/[Google Mail].Sent Mail")
         (mu4e-trash-folder  "/[Google Mail].Trash")
         (user-mail-address "jan.moeller0@gmail.com")
         (smtpmail-smtp-user "jan.moeller0@gmail.com")
         (smtpmail-local-domain "gmail.com")
         (smtpmail-default-smtp-server "smtp.gmail.com")
         (smtpmail-smtp-server "smtp.gmail.com")
         (smtpmail-smtp-service 587)
         )
        ;; Include any other accounts here ...
        ))

    (defun my-mu4e-set-account ()
      "Set the account for composing a message.
   This function is taken from:
     https://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html"
      (let* ((account
              (if mu4e-compose-parent-message
                  (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                    (string-match "/\\(.*?\\)/" maildir)
                    (match-string 1 maildir))
                (completing-read (format "Compose with account: (%s) "
                                         (mapconcat #'(lambda (var) (car var))
                                                    my-mu4e-account-alist "/"))
                                 (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                 nil t nil nil (caar my-mu4e-account-alist))))
             (account-vars (cdr (assoc account my-mu4e-account-alist))))
        (if account-vars
            (mapc #'(lambda (var)
                      (set (car var) (cadr var)))
                  account-vars)
          (error "No email account found"))))


    :load-path "/usr/share/emacs/site-lisp/mu4e")

(use-package mu4e-overview)

(use-package mu4e-alert
    :hook (message-send . mml-secure-message-sign-pgpmime)
    :init
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display)
    :config
    (mu4e-alert-set-default-style 'libnotify))
#+END_SRC
** restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
    :commands restclient-mode)
#+END_SRC
** x509-mode
#+BEGIN_SRC emacs-lisp
(use-package x509-mode :defer t)
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
** quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun :commands quickrun)
#+END_SRC
** esup
Emacs Start Up Profiler [[https://github.com/jschaf/esup][@github.com]]
#+BEGIN_SRC emacs-lisp
(use-package esup
    :commands esup)
#+END_SRC
* Style
** Theme
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq-default cursor-type 'bar)
(use-package modus-operandi-theme
    :ensure t
    :init
   (defun my/load-theme ()
      (load-theme 'modus-operandi t)
      (set-frame-font "Monospace 12" nil t)
      (set-face-attribute 'sp-show-pair-match-face nil :foreground "green" :background nil)
      (set-face-attribute 'sp-show-pair-mismatch-face nil :foreground "red" :background nil))

    (my-util-with-eval-after-frame
     (my/load-theme))
  )
#+END_SRC
* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* meta
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]]
*** [[https://github.com/jwiegley/dot-emacs][jwiegley dot-emacs]]
*** [[https://www.reddit.com/r/emacs/comments/3obmoh/emacs_for_writers_presentation_by_jay_dixit/][Emacs for writers]]
- org-bullets
** packages maybe Futur
*** Focus [[https://github.com/larstvei/Focus/blob/master/README.md][@github.com]]
** todo
- magit diff args -> git global config
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)
** my-own-tips
C-c C-o save search results
reset var: `(setq foo (eval (car (get 'foo 'standard-value))))`
(setq require-final-newline nil)
